<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Ronan Blog</title>
    <link>https://blog.ronan.us.kg/categories/docs/</link>
    <description>Recent content in Docs on Ronan Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Oct 2024 13:29:24 +0800</lastBuildDate>
    <atom:link href="https://blog.ronan.us.kg/categories/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PyInstaller将Python应用打包为Android应用程序</title>
      <link>https://blog.ronan.us.kg/posts/pyinstaller%E5%B0%86python%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85%E4%B8%BAandroid%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:24 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/pyinstaller%E5%B0%86python%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85%E4%B8%BAandroid%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;在移动应用开发中，Python虽然不如Java或Kotlin那样广泛使用，但仍有一部分开发者偏爱使用Python进行开发。PyInstaller是一个将Python应用打包成独立可执行文件的工具，它支持多种操作系统，包括Windows、Linux和macOS。更为重要的是，通过一些额外的配置和工具，PyInstaller还能够将Python应用打包成Android APK文件，使得Python应用能在Android设备上运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-安装pyinstaller&#34;&gt;1. 安装PyInstaller&lt;/h3&gt;&#xA;&lt;p&gt;首先，你需要确保你的开发环境中已经安装了Python和pip。然后，你可以通过pip来安装PyInstaller。打开命令行或终端，输入以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install pyinstaller&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-准备你的python应用&#34;&gt;2. 准备你的Python应用&lt;/h3&gt;&#xA;&lt;p&gt;在打包之前，你需要确保你的Python应用能够正常运行，并且所有依赖都已经正确安装。此外，你的应用应该能够在一个没有图形用户界面的环境中运行，因为Android设备可能没有图形界面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-使用pyinstaller打包应用&#34;&gt;3. 使用PyInstaller打包应用&lt;/h3&gt;&#xA;&lt;p&gt;在你的Python应用所在的目录下，打开命令行或终端，输入以下命令来打包你的应用：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pyinstaller --onefile --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your_app_name your_app_script.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里，&lt;code&gt;--onefile&lt;/code&gt;选项表示将你的应用打包成一个单独的可执行文件，&lt;code&gt;--name&lt;/code&gt;选项用于指定打包后的应用名称，&lt;code&gt;your_app_script.py&lt;/code&gt;则是你的应用的主脚本文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-配置android打包&#34;&gt;4. 配置Android打包&lt;/h3&gt;&#xA;&lt;p&gt;要将Python应用打包成Android APK文件，你需要使用一个名为&lt;code&gt;python-for-android&lt;/code&gt;的工具。你可以通过pip来安装它：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install python-for-android&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后，你可以在&lt;code&gt;python-for-android&lt;/code&gt;的目录下找到一个名为&lt;code&gt;buildozer.spec&lt;/code&gt;的配置文件。你需要编辑这个文件来配置你的应用。&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;buildozer.spec&lt;/code&gt;文件中，你需要设置以下几个关键项：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: 你的应用的名称&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;package.name&lt;/code&gt;: 你的应用的Python包名&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;package.domain&lt;/code&gt;: 你的应用的网站&lt;a href=&#34;https://cloud.baidu.com/product/bcd.html&#34;&gt;域名&lt;/a&gt;（可选）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;source.include_exts&lt;/code&gt;: 需要包含的文件扩展名，例如&lt;code&gt;.py&lt;/code&gt;, &lt;code&gt;.kv&lt;/code&gt;, &lt;code&gt;.atlas&lt;/code&gt;等&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;requirements&lt;/code&gt;: 你的应用所依赖的Python库和模块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-使用buildozer打包apk&#34;&gt;5. 使用Buildozer打包APK&lt;/h3&gt;&#xA;&lt;p&gt;配置完成后，你可以在命令行或终端中运行以下命令来打包你的应用：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buildozer init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buildozer android debug&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个命令会初始化Buildozer的配置，第二个命令则会开始打包过程。打包完成后，你会在&lt;code&gt;bin/&lt;/code&gt;目录下找到一个名为&lt;code&gt;your_app_name-0.1-debug.apk&lt;/code&gt;的文件，这就是你的Android应用APK文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;6-在android设备上安装apk&#34;&gt;6. 在Android设备上安装APK&lt;/h3&gt;&#xA;&lt;p&gt;最后，你可以将这个APK文件安装到你的Android设备上。你可以通过ADB工具来安装，也可以在设备上使用文件管理器来安装。&lt;/p&gt;&#xA;&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;&#xA;&lt;p&gt;通过以上步骤，你就可以使用PyInstaller将你的Python应用打包成Android APK文件，并在Android设备上运行了。虽然这个过程相对复杂，但是一旦你掌握了它，你就可以轻松地将你的Python应用部署到更多的平台上，让更多的人使用你的应用了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Gmeek」上传脚本(单篇或批量)</title>
      <link>https://blog.ronan.us.kg/posts/gmeek%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC%E5%8D%95%E7%AF%87%E6%88%96%E6%89%B9%E9%87%8F/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:23 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/gmeek%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC%E5%8D%95%E7%AF%87%E6%88%96%E6%89%B9%E9%87%8F/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;[!caution]&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 该脚本仅适用于通过Gmeek项目搭建的博客网站&#xA;在开始使用之前，需要创建 github 的个人 Token&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;1创建github个人token&#34;&gt;1.创建github个人Token&lt;/h1&gt;&#xA;&lt;p&gt;1.在 GitHub 上任何页面的&lt;strong&gt;右上角&lt;/strong&gt;，单击您的&lt;code&gt;个人资料照片&lt;/code&gt;，然后单击 &lt;code&gt;Settings&lt;/code&gt;。&lt;br&gt;&#xA;2.在左侧边栏中，单击 &lt;code&gt;Developer settings（开发人员设置）&lt;/code&gt;。&lt;br&gt;&#xA;3.在左侧边栏中的 &lt;strong&gt;Personal access tokens （个人访问令牌）&lt;/strong&gt; 下，单击 &lt;code&gt;Tokens （classic）&lt;/code&gt;。&lt;br&gt;&#xA;4.选择 &lt;code&gt;Generate new token（生成新令牌）&lt;/code&gt;，然后单击 &lt;code&gt;Generate new token （classic）&lt;/code&gt;。&lt;br&gt;&#xA;5.在 &lt;strong&gt;Note&lt;/strong&gt; 字段中，为您的令牌指定一个描述性名称。&lt;br&gt;&#xA;6.要为您的令牌指定过期时间，请选择 &lt;strong&gt;Expiration（过期）&lt;/strong&gt;，然后选择默认选项或单击 Custom（自定义）以输入日期。&lt;br&gt;&#xA;7.选择要授予此令牌的范围。要使用令牌从命令行访问存储库，请选择 &lt;code&gt;repo&lt;/code&gt; ( &lt;strong&gt;这里一定要打上勾！！！&lt;/strong&gt; ) 。没有分配范围的令牌只能访问公共信息。&lt;br&gt;&#xA;8.滑动到底部，单击 &lt;code&gt;Generate token&lt;/code&gt;&lt;br&gt;&#xA;9.&lt;strong&gt;将新令牌复制到剪贴板并且保管好，令牌只出现一次，一定要保管好！一定要保管好！一定要保管好！&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2使用方法&#34;&gt;2.使用方法&lt;/h1&gt;&#xA;&lt;p&gt;以下有两个方法，分为sh脚本和python脚本：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!tip]&#xA;&lt;strong&gt;建议：&lt;/strong&gt;&#xA;Linux与mac系统使用 sh 脚本，Windows使用py脚本体验更佳&#xA;也可根据喜好自行采用&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;21配置脚本&#34;&gt;2.1配置脚本&lt;/h2&gt;&#xA;&lt;h3 id=&#34;对于-sh-脚本&#34;&gt;对于 sh 脚本&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!important]&lt;/p&gt;&#xA;&lt;p&gt;使用前需确认以下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统已安装curl&lt;/li&gt;&#xA;&lt;li&gt;系统已安装jq&lt;/li&gt;&#xA;&lt;li&gt;系统可使用bash&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;curl、jq 安装方法由于系统不同，方法多样，所以具体安装方法可以自行查找&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;在代码开始的前几行，找到以下几个值，在引号里填入自己的信息：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;TOKEN&lt;/code&gt;  为自己创建的Token值&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;OWNER&lt;/code&gt; 为自己的github用户名&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;REPO&lt;/code&gt; 为自己的Gmeek博客仓库名，一般是 &lt;code&gt;xxx.github.io&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;对于-py-脚本&#34;&gt;对于 py 脚本&lt;/h3&gt;&#xA;&lt;p&gt;1.在开始使用之前，需要安装 &lt;code&gt;requests&lt;/code&gt; 模块&lt;/p&gt;</description>
    </item>
    <item>
      <title>「platformIO」printf 重映像、串口打印数据</title>
      <link>https://blog.ronan.us.kg/posts/platformioprintf-%E9%87%8D%E6%98%A0%E5%83%8F%E4%B8%B2%E5%8F%A3%E6%89%93%E5%8D%B0%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:21 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/platformioprintf-%E9%87%8D%E6%98%A0%E5%83%8F%E4%B8%B2%E5%8F%A3%E6%89%93%E5%8D%B0%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;在 &lt;code&gt;keil&lt;/code&gt; 环境中使用 printf 通过串口打印数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在 main.c 引入&lt;code&gt;stdio.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;重写&lt;code&gt;fputc&lt;/code&gt;函数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// keil arm环境，如果你要用printf函数，就必须重写fputc函数，并且在魔术棒里面勾选使用Micro LIB&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fputc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ch, FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;USART_SendData&lt;/span&gt;(USART1, ch);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;USART_GetFlagStatus&lt;/span&gt;(USART1, USART_FLAG_TC) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; RESET);&lt;span style=&#34;color:#75715e&#34;&gt;//循环的判断串口是否发送完数据&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ch;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成以上配置即可在 main 函数中使用 printf 函数通过串口打印数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在 &lt;code&gt;arm-***-gcc&lt;/code&gt; 环境使用 printf 通过串口打印数据：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;不需要引入&lt;code&gt;stdio.h&lt;/code&gt;头文件&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;直接在 main.c 中重写&lt;code&gt;_write&lt;/code&gt;方法即可&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// gcc 编译环境重写该方法&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//这是一种写法&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_write&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pBuffer, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((USART1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SR&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 等待串口发送完毕&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        USART1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt;) pBuffer[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//还有另一种写法，根据情况按需选择&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_write&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pBuffer, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;USART_GetFlagStatus&lt;/span&gt;(USART1, USART_FLAG_TC) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; RESET);&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 等待串口发送完毕&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        USART1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;DR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt;) pBuffer[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>「Python」模块和包</title>
      <link>https://blog.ronan.us.kg/posts/python%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:19 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/python%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</guid>
      <description>&lt;p&gt;Python 提供了强大的模块支持，主要体现在，不仅 Python 标准库中包含了大量的模块（称为标准模块），还有大量的第三方模块，开发者自己也可以开发自定义模块。通过这些强大的模块可以极大地提高开发者的开发效率。&lt;/p&gt;&#xA;&lt;p&gt;那么，模块到底指的是什么呢？Python 模块(Module)，是一个 Python 文件，以 .py 结尾，也就是 Python 程序的后缀名。 模块能定义函数，类和变量，模块里也能包含可执行的代码。用作模块的程序与其他的程序并没有什么区别。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;模块的作用&lt;/strong&gt;: python中有很多各种不同的模块, 每一个模块都可以帮助我们快速的实现一些功能, 比如实现与数学相关的功能就可以使用 math 模块，我们可以这样理解，每个变量，函数，类都是一个工具，而模块则是一个工具箱，里面可以放很多工具。当我们想要使用某个工具的时候，我们不需要现场制造（写新的代码），只需要拿出来含有相对应工具的工具箱即可（导入相对应的模块）。&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-模块的导入方式&#34;&gt;1. 模块的导入方式&lt;/h1&gt;&#xA;&lt;p&gt;在 Python 中，模块使用前需要先导入，导入语法如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将整个模块导入&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; 模块名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将整个模块导入，并且在程序中用别名代替模块名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; 模块名 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; 别名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入模块名中的某个类，变量，方法&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; 模块名 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; 类&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;变量&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;方法等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入整个模块&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; 模块名 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入模块的某个功能，并用别名替代功能名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; 模块名 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; 功能名 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; 别名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;code&gt;import 模块名/import 模块名 as 别名&lt;/code&gt; 与 &lt;code&gt;from 模块名 import *&lt;/code&gt; 使用区别的。使用 import 的导入模块，在使用模块中的功能时，必须以&lt;code&gt;模块名.功能名&lt;/code&gt;的形式调用。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;as 别名&lt;/code&gt; 来导入时，给模块重新命名一个名字，可能是因为防止名称重复，也可能是为了方便书写。&lt;/p&gt;&#xA;&lt;p&gt;以导入并使用 math 模块为例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 import 语句导入 math 模块&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 math 模块中的π的值，&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 math 函数中的 三角函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 mport 模块名 as 别名,导入 math 模块&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; m&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 from 模块名 import * 导入 math 模块&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pi)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(sin(pi &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 from 模块名 import 类，变量，方法等&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pi, sin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pi)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(sin(pi &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 from 模块名 import 功能名 as 别名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pi &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pai&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sin &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sine&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pai)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(sine(pai &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-自定义模块&#34;&gt;2. 自定义模块&lt;/h1&gt;&#xA;&lt;p&gt;Python 中已经帮我们实现了很多模块，但是有些时候，我们还需要一些个性化的模块，这时就可以通过自定义模块实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「python」Conda虚拟环境</title>
      <link>https://blog.ronan.us.kg/posts/pythonconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:17 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/pythonconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;h1 id=&#34;创建一个新的虚拟环境&#34;&gt;创建一个新的虚拟环境&lt;/h1&gt;&#xA;&lt;p&gt;可以使用以下命令创建一个名为 &lt;code&gt;jupyter_env&lt;/code&gt; 的新环境，并指定 Python 版本（例如 Python 3.11）&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create -n jupyter_env python&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;[!tip]&lt;/p&gt;&#xA;&lt;p&gt;通过上面命令创建的虚拟环境通常会保存在主环境目录，如果想指定虚拟环境的位置，可以使用下面的命令&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;指定路径&lt;/strong&gt;：如果你在创建环境时使用了 &lt;code&gt;-p&lt;/code&gt; 或 &lt;code&gt;--prefix&lt;/code&gt; 选项指定路径，环境会存储在你指定的位置。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create -p /my/custom/path/env_name python&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;激活环境与退出环境&#34;&gt;激活环境与退出环境&lt;/h1&gt;&#xA;&lt;p&gt;激活新创建的名为 &lt;code&gt;jupyter_env&lt;/code&gt; 的环境：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda activate jupyter_env&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;退出已激活环境：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda deactivate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;列出所有虚拟环境&#34;&gt;列出所有虚拟环境&lt;/h1&gt;&#xA;&lt;p&gt;首先，你可以列出所有已创建的虚拟环境(以下命令二选一)：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda env list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda info --envs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会显示所有环境的名称和路径。&lt;/p&gt;&#xA;&lt;h1 id=&#34;删除虚拟环境&#34;&gt;删除虚拟环境&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;删除指定名称的虚拟环境：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda remove --name ENV_NAME --all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;ENV_NAME&lt;/code&gt; 是你要删除的环境的名称，&lt;code&gt;--all&lt;/code&gt; 选项表示删除整个环境及其所有包和依赖项。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;删除指定路径的虚拟环境&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果你是通过指定路径创建的环境，可以使用路径来删除：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda remove -p /path/to/your/env --all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在执行删除命令后，Conda 会提示你确认是否要删除该环境。输入 &lt;code&gt;y&lt;/code&gt; 并回车以确认删除操作。&lt;/p&gt;&#xA;&lt;h1 id=&#34;查看当前处于哪一个虚拟环境&#34;&gt;查看当前处于哪一个虚拟环境&lt;/h1&gt;&#xA;&lt;p&gt;你可以使用以下命令来查看当前的 Conda 环境信息：&lt;/p&gt;</description>
    </item>
    <item>
      <title>「python」一个快速生成requirements.txt的库</title>
      <link>https://blog.ronan.us.kg/posts/python%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90requirements.txt%E7%9A%84%E5%BA%93/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:15 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/python%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90requirements.txt%E7%9A%84%E5%BA%93/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;为什么选择 &lt;code&gt;pipreqs&lt;/code&gt; ？&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;虽然 Python 提供了 &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; 这样的命令生成 &lt;code&gt;requirements.txt&lt;/code&gt;，但它有一个致命缺陷：它会把你当前环境中安装的所有库都写进去，而不仅仅是你项目实际用到的库。结果就是，一个原本只需要几个依赖的小项目，可能会生成一个长长的&lt;code&gt;requirements.txt&lt;/code&gt;，这不仅冗余，还可能导致依赖冲突。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;pipreqs&lt;/code&gt; 则聪明得多！它会扫描你的项目代码，只把实际用到的库和版本写进 &lt;code&gt;requirements.txt&lt;/code&gt;，简洁又精准。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装pipreqs&#34;&gt;安装pipreqs&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install pipreqs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何使用pipreqs&#34;&gt;如何使用pipreqs？&lt;/h2&gt;&#xA;&lt;p&gt;进入到需要生成 &lt;code&gt;requirements.txt&lt;/code&gt; 的工程目录下，假设工程在&lt;code&gt;/path/project&lt;/code&gt;，然后输入以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipreqs &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;project&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接进入到该工程目录下，然后运行 &lt;code&gt;pipreqs&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipreqs &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>「OrbStack」Mac 系统中一个更快的 Docker 可视化工具，可完全替代 Docker Desktop</title>
      <link>https://blog.ronan.us.kg/posts/orbstackmac-%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%BF%AB%E7%9A%84-docker-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E5%8F%AF%E5%AE%8C%E5%85%A8%E6%9B%BF%E4%BB%A3-docker-desktop/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:13 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/orbstackmac-%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%BF%AB%E7%9A%84-docker-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E5%8F%AF%E5%AE%8C%E5%85%A8%E6%9B%BF%E4%BB%A3-docker-desktop/</guid>
      <description>&lt;p&gt;我之前用的是 Docker Desktop，每次准备启动容器的时候，我都会把能关的应用都关闭，省的电脑卡， Docker Desktop 确实有点儿耗性能。&lt;/p&gt;&#xA;&lt;p&gt;如果你也觉得 Docker Desktop 太慢了，或者之前没有可视化工具，不妨试试 OrbStack。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/orbstack.png&#34; data-dimbox data-dimbox-caption=&#34;img&#34;&gt;&#xA;  &lt;img alt=&#34;img&#34; src=&#34;https://imgs.ronan.us.kg/orbstack.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;OrbStack 是一款针对 macOS 操作系统的定制的，它的目的就是提供一个高效、轻量级的 Docker 和虚拟机（VM）管理平台。&lt;/p&gt;&#xA;&lt;p&gt;官网地址： &lt;a href=&#34;https://orbstack.dev/&#34;&gt;https://orbstack.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;它不仅仅支持 Docker、 Kubernetes，而且支持Linux子系统，类似于 Windows 系统下的 WSL。&lt;/p&gt;&#xA;&lt;p&gt;它的功能如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;轻量级虚拟化：OrbStack 使用 macOS 原生的虚拟化框架，确保了高效的资源利用率和优秀的性能表现。&lt;/li&gt;&#xA;&lt;li&gt;简易管理：提供了对Docker容器和虚拟机的统一管理界面，使用户能够方便地启动、停止、配置和监视容器与虚拟机。&lt;/li&gt;&#xA;&lt;li&gt;无缝集成：与 Docker 和 Kubernetes 无缝集成，支持容器编排和微服务架构的轻松管理。&lt;/li&gt;&#xA;&lt;li&gt;强大工具支持：支持 SSH、文件同步、端口转发等功能，方便开发者进行远程调试和开发。&lt;/li&gt;&#xA;&lt;li&gt;用户友好：提供图形化用户界面和命令行工具，开发者可以根据需求选择最适合的操作方式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;OrbStack 和 Docker Desktop 的优势对比&#xA;虽然 OrbStack 和 Docker Desktop 都是用于管理Docker环境的工具，但在具体特性和用户体验上有一些显著的区别和优势：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;资源利用率与性能&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OrbStack：利用 macOS 原生虚拟化框架，因此更轻量级，启动更快，占用的系统资源更少。&lt;/li&gt;&#xA;&lt;li&gt;Docker Desktop：依赖于第三方虚拟化解决方案如 HyperKit 或 VirtualBox，在资源消耗上可能稍高，尤其是在大量使用 Docker 容器的场景下。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;系统整合&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OrbStack：深度集成于 macOS，具有更高的系统兼容性和稳定性。对于使用 macOS 系统的开发者，OrbStack 能提供更流畅和无缝的体验。&lt;/li&gt;&#xA;&lt;li&gt;Docker Desktop：尽管支持多种操作系统，但在各个平台上的整合程度和性能表现可能会有所不同。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;用户界面和易用性&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OrbStack：提供简洁直观的用户界面，同时保留强大的命令行工具。适合那些希望快速上手，并且需要高效管理容器和虚拟机的用户。&lt;/li&gt;&#xA;&lt;li&gt;Docker Desktop：虽然功能全面，但其界面对某些用户尤其是新手用户可能显得有些复杂，学习和配置的时间成本稍高。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;特殊功能&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OrbStack：提供了特有的功能如文件同步、端口转发和高级网络配置等，使得远程开发和调试更加便捷。&lt;/li&gt;&#xA;&lt;li&gt;Docker Desktop：功能依赖于 Docker Engine，具有全面的 Docker 支持，但某些高级配置功能可能需要额外的学习成本。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如果你正在使用 Docker Desktop ，可以在 OrbStack 中一键将原本的 Docker 配置和资源导入到 OrbStack，几乎零成本切换。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「platformIO」解决 stm32 标准外设库时钟不准的问题</title>
      <link>https://blog.ronan.us.kg/posts/platformio%E8%A7%A3%E5%86%B3-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E6%97%B6%E9%92%9F%E4%B8%8D%E5%87%86%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:11 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/platformio%E8%A7%A3%E5%86%B3-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E6%97%B6%E9%92%9F%E4%B8%8D%E5%87%86%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;以下以stm32f407系列举例&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;1遭遇问题&#34;&gt;1.遭遇问题：&lt;/h3&gt;&#xA;&lt;p&gt;在使用&lt;a href=&#34;https://blog.ronan.us.kg/2024/09/08/platformIO-%E5%9F%BA%E4%BA%8E-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF/&#34;&gt; platformIO 搭建标准外设库&lt;/a&gt;进行实际开发时遇到了外部时钟不准的问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2原因分析&#34;&gt;2.原因分析：&lt;/h3&gt;&#xA;&lt;p&gt;这是因为 HSE 的配置有问题，platformIO 自带以及从 ST 官网下载的标准库中的 &lt;code&gt;system_stm32f4xx.c&lt;/code&gt; 的&lt;code&gt;PLL_M&lt;/code&gt;和&lt;code&gt;stm32f4xx.h&lt;/code&gt;中的&lt;code&gt; HSE_VALUE&lt;/code&gt;默认值与实际开发版的外部晶振频率不一致&lt;/p&gt;&#xA;&lt;h3 id=&#34;3解决方法&#34;&gt;3.解决方法&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;假设当前stm32f407的板子上外部晶振是8MHz（根据自身情况不同）&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;1.将 platformIO 的安装目录中的&lt;code&gt;/Users/&amp;lt;xxx&amp;gt;/.platformio/packages/framework-cmsis-stm32f4/Source/Templates/system_stm32f4xx.c&lt;/code&gt;文件删除。&lt;/p&gt;&#xA;&lt;p&gt;2.将解压得到的标准库的&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/system_stm32f4xx.c&lt;/code&gt;文件复制到&lt;code&gt;/Users/&amp;lt;xxx&amp;gt;/.platformio/packages/framework-cmsis-stm32f4/Source/Templates/&lt;/code&gt;目录下。&lt;/p&gt;&#xA;&lt;p&gt;3.打开&lt;code&gt;/Users/&amp;lt;xxx&amp;gt;/.platformio/packages/framework-cmsis-stm32f4/Source/Templates/system_stm32f4xx.c&lt;/code&gt;，在其中搜索到&lt;code&gt;PLL_M&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#define PLL_M      25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将 &lt;code&gt;PLL_M&lt;/code&gt; 后的&lt;code&gt;25&lt;/code&gt;修改为 &lt;code&gt;8&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;4.找到&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h&lt;/code&gt;，在其中搜索&lt;code&gt;HSE_VALUE&lt;/code&gt;，找到&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if defined(STM32F40_41xxx) || defined(STM32F427_437xx)  || defined(STM32F429_439xx) || defined(STM32F401xx) || \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F469_479xx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#if !defined  (HSE_VALUE)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#define HSE_VALUE    ((uint32_t)25000000) &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*!&amp;lt; Value of the External oscillator in Hz */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将&lt;code&gt;((uint32_t)25000000)&lt;/code&gt;修改为&lt;code&gt;((uint32_t)8000000)&lt;/code&gt;并强制保存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>创建以及管理 SSH 密钥对</title>
      <link>https://blog.ronan.us.kg/posts/%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E7%AE%A1%E7%90%86-ssh-%E5%AF%86%E9%92%A5%E5%AF%B9/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:10 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E5%88%9B%E5%BB%BA%E4%BB%A5%E5%8F%8A%E7%AE%A1%E7%90%86-ssh-%E5%AF%86%E9%92%A5%E5%AF%B9/</guid>
      <description>&lt;h1 id=&#34;1创建密钥对此方法适用于从未创建过密钥对的本地主机&#34;&gt;1.创建密钥对（此方法适用于从未创建过密钥对的本地主机）&lt;/h1&gt;&#xA;&lt;p&gt;在终端输入以下命令:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-keygen&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后一路回车，不出意外的话，看到以下画面，密钥（包含私钥和公钥，公钥以 .pub 结尾）就创建成功了&#xA;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/ssh-keygen.png&#34; data-dimbox data-dimbox-caption=&#34;ssh-kegen&#34;&gt;&#xA;  &lt;img alt=&#34;ssh-kegen&#34; src=&#34;https://imgs.ronan.us.kg/ssh-keygen.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;对于 linux 和类 linux 系统，该密钥存放于 &lt;code&gt;~/.ssh/&lt;/code&gt; ，可以通过 &lt;code&gt;ls ～/.ssh&lt;/code&gt; 查看。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2创建多个密钥对&#34;&gt;2.创建多个密钥对&lt;/h1&gt;&#xA;&lt;p&gt;有时候可能会需要多个密钥对，但是又不想影响到之前已创建的密钥对&lt;/p&gt;&#xA;&lt;p&gt;创建 ed25519 类型的密钥对（最推荐）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &amp;#34;这里写注释&amp;#34; -f ~/.ssh/id_ed25519_new_name&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ssh-keygen&lt;/code&gt;：这是一个用于生成、管理和转换 SSH 密钥的命令行工具。&lt;br&gt;&#xA;&lt;code&gt;-t ed25519&lt;/code&gt;：指定要生成的密钥类型为 ed25519。这种类型的密钥被认为更安全，并且通常生成更快。&lt;br&gt;&#xA;&lt;code&gt;-C &amp;quot;这里写注释&amp;quot;&lt;/code&gt;：这是一个注释（通常使用邮箱，但是我不喜欢），用于标识这个密钥的用途。&lt;br&gt;&#xA;&lt;code&gt;-f ~/.ssh/id_ed25519_new_name&lt;/code&gt;：指定生成的密钥文件的存储路径和名称。在这里，密钥会被保存为 ~/.ssh/id_ed25519_new_name，私钥为 id_ed25519_new_name，而公钥则为 id_ed25519_new_name.pub。&lt;/p&gt;&#xA;&lt;p&gt;或者可以创建 rsa 类型的密钥对&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;#34;用于163账号的 github&amp;#34; -f ~/.ssh/id_rsa_new&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;21创建带有密码的密钥对&#34;&gt;2.1创建带有密码的密钥对&lt;/h3&gt;&#xA;&lt;p&gt;通过上面的命令创建密钥对时，一路回车不要过快，系统会提示输入一个密码。可以输入一个强密码，确保它是安全的。再次输入相同的密码以确认：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter passphrase (empty for no passphrase):&#xA;Enter same passphrase again:&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：在输入密码时，终端不会显示任何字符（包括星号），这是正常现象。&lt;/p&gt;&#xA;&lt;p&gt;如果你忘记了 SSH 密钥的密码，将无法使用该密钥进行身份验证，因为 SSH 并没有提供恢复密码的功能。最简单的解决方案是生成一个新的 SSH 密钥对。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「python」打包程序</title>
      <link>https://blog.ronan.us.kg/posts/python%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:08 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/python%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;通过pyinstaller打包&#34;&gt;通过pyinstaller打包&lt;/h1&gt;&#xA;&lt;p&gt;要将Python脚本打包成一个独立运行的应用程序，可以使用工具PyInstaller，其可以将Python脚本打包成一个可执行文件 (.exe) 。这样生成的应用程序不依赖于系统上的任何库，可以在没有Python环境的计算机上运行。一般使用pyinstaller将py文件打包成可执行文件。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!warning]&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;通过该方法打包的程序不具备跨平台性&lt;/strong&gt; ：如果你需要在其他操作系统上运行该程序（例如在Windows上开发并希望在macOS或Linux上运行），你需要在目标平台上执行上述步骤。PyInstaller 无法直接生成跨平台的可执行文件。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;1-安装-pyinstaller&#34;&gt;1. 安装 PyInstaller&lt;/h3&gt;&#xA;&lt;p&gt;首先，确保你已经安装了 PyInstaller。如果没有，可以使用以下命令进行安装：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install pyinstaller&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-打包-python-脚本&#34;&gt;2. 打包 Python 脚本&lt;/h3&gt;&#xA;&lt;p&gt;在终端或命令提示符下，导航到包含你的 Python 脚本的目录，并运行以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pyinstaller &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;onefile script_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将 &lt;code&gt;script_name.py&lt;/code&gt; 替换为你要打包的脚本文件名。&lt;code&gt;--onefile&lt;/code&gt; 参数将所有的依赖和脚本打包成一个单一的可执行文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-查找生成的可执行文件&#34;&gt;3. 查找生成的可执行文件&lt;/h3&gt;&#xA;&lt;p&gt;打包完成后，PyInstaller 会在当前目录下生成一个 &lt;code&gt;dist&lt;/code&gt; 文件夹，其中包含你的可执行文件。你可以将这个文件复制到其他没有 Python 环境的系统上运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-处理依赖项&#34;&gt;4. 处理依赖项&lt;/h3&gt;&#xA;&lt;p&gt;如果你的脚本有特定的依赖项（如额外的Python库），PyInstaller 会自动检测并打包它们。但如果有某些依赖项没有正确处理，你可能需要使用 &lt;code&gt;--hidden-import&lt;/code&gt; 参数手动指定。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pyinstaller &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;onefile &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;hidden&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;lt;&lt;/span&gt;module_name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; script_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>2024-9-12-「图床」上传脚本，基于 cloudflare R2 对象存储</title>
      <link>https://blog.ronan.us.kg/posts/2024-9-12-%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC%E5%9F%BA%E4%BA%8E-cloudflare-r2-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:06 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/2024-9-12-%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC%E5%9F%BA%E4%BA%8E-cloudflare-r2-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;p&gt;使用之前需要通过 &lt;code&gt;pip install boto3&lt;/code&gt; 安装 boto3 库。&lt;/p&gt;&#xA;&lt;p&gt;使用方法：&lt;code&gt;usage: python imgs.py input_file&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 &lt;code&gt;7-10&lt;/code&gt; 行填入相应信息并将代码保存为 imgs.py：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;account_id&lt;/code&gt;：账户 id&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/cloudflare_R2_account_id.png&#34; data-dimbox data-dimbox-caption=&#34;cloudflare_R2_account_id&#34;&gt;&#xA;  &lt;img alt=&#34;cloudflare_R2_account_id&#34; src=&#34;https://imgs.ronan.us.kg/cloudflare_R2_account_id.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;access_key_id&lt;/code&gt;：s3客户端访问密钥&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;secret_access_key&lt;/code&gt;：s3客户端机密访问密钥&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/cloudflare_R2_S3_API_Token.png&#34; data-dimbox data-dimbox-caption=&#34;cloudflare_R2_S3_API_Token&#34;&gt;&#xA;  &lt;img alt=&#34;cloudflare_R2_S3_API_Token&#34; src=&#34;https://imgs.ronan.us.kg/cloudflare_R2_S3_API_Token.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;bucket_name&lt;/code&gt;：R2 存储桶名称&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/cloudflare_R2_bucket_name.png&#34; data-dimbox data-dimbox-caption=&#34;cloudflare_R2_bucket_name&#34;&gt;&#xA;  &lt;img alt=&#34;cloudflare_R2_bucket_name&#34; src=&#34;https://imgs.ronan.us.kg/cloudflare_R2_bucket_name.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;可以直接运行脚本或者将脚本&lt;a href=&#34;https://blog.ronan.us.kg/2024/09/02/python-%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/&#34;&gt;打包为应用程序&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; boto3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; botocore.exceptions &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ClientError&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Cloudflare R2 配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;account_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 这里填入账户 id&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;access_key_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 这里填写 S3 客户端的‘访问密钥’&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;secret_access_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#这里填写 S3 客户端的‘机密访问密钥’&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bucket_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 这里填入你要上传文件到哪个 R2 存储桶的名称&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endpoint_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;account_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.r2.cloudflarestorage.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建 S3 客户端&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s3&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                endpoint_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;endpoint_url,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                aws_access_key_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;access_key_id,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                aws_secret_access_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;secret_access_key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_file&lt;/span&gt;(file_path, object_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    上传文件到 Cloudflare R2 存储桶&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param file_path: 要上传的本地文件路径&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param object_name: 在 R2 中的对象名称，如果不指定则使用文件名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :return: 如果上传成功返回 True，否则返回 False&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; object_name &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        object_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(file_path)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upload_file(file_path, bucket_name, object_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;file_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; uploaded successfully as &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;object_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://imgs.ronan.us.kg/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;object_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ClientError &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error uploading file &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;file_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;e&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;传入本地或网络图片路径，即可上传到 cloudflare R2 对象存储桶&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;local_file_path&amp;#34;&lt;/span&gt;, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;本地图片路径&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    upload_file(args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local_file_path)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>JavasSript常用方法</title>
      <link>https://blog.ronan.us.kg/posts/javassript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:04 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/javassript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;获取-dom-节点&#34;&gt;获取 DOM 节点&lt;/h1&gt;&#xA;&lt;h3 id=&#34;1选择匹配到的第一个元素&#34;&gt;1.选择匹配到的第一个元素&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;css选择器&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;包含一个或多个有效的css选择器 &lt;strong&gt;字符串&lt;/strong&gt; ，查看 &lt;a href=&#34;https://www.runoob.com/cssref/css-selectors.html&#34;&gt;更多css选择器&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;返回值：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;CSS选择器匹配的第一个元素，&lt;strong&gt;一个HTML Element对象&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2选择匹配的多个元素&#34;&gt;2.选择匹配的多个元素&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelectorAll&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CSS选择器&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;包含一个或多个有效的css选择器 &lt;strong&gt;字符串&lt;/strong&gt; ，查看 &lt;a href=&#34;https://www.runoob.com/cssref/css-selectors.html&#34;&gt;更多css选择器&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;返回值：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;CSS选择器匹配的 &lt;strong&gt;NodeList 对象集合&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headings&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelectorAll&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h1, h2, h3, h4, h5, h6&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;headings&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;textContent&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将打印出 h1 标签里的文本内容。&lt;/p&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;1.获取页面中的标签我们最终常用那两种方式?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;querySelectorAll()&lt;/p&gt;&#xA;&lt;p&gt;querySelector()&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;2.他们两者的区别是什么?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;querySelector() 只能选择一个元素，可以直接操作&lt;/p&gt;&#xA;&lt;p&gt;querySelectorAll() 可以选择多个元素，得到的是伪数组，需要遍历得每一个元素&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;3.他们两者小括号里面的参数有神马注意事项&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;里面写css选择&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;必须是字符串，也就是必须加引号&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;更新-dom-节点&#34;&gt;更新 DOM 节点&lt;/h1&gt;&#xA;&lt;h3 id=&#34;1innertext方法&#34;&gt;1.innerText方法&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;对象&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;strong&amp;gt;这不会变成粗体&amp;lt;/strong&amp;gt;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过该方法插入的只是字符串(纯文本信息)，不能识别 html 标签&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2innerhtml方法最常用&#34;&gt;2.innerHtml方法（最常用）&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;对象&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHtml&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;strong&amp;gt;这里可以变成粗体&amp;lt;/strong&amp;gt;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该方法可以识别 html 标签，或者可以用于插入 css 样式。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;对象&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHtml&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    div {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        width: 300px;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        border: 25px solid green;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        padding: 25px;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        margin: 25px;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;创建和插入节点&#34;&gt;创建和插入节点&lt;/h1&gt;&#xA;&lt;h3 id=&#34;1创建节点并添加属性&#34;&gt;1.创建节点并添加属性&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;创建节点语法：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>stm32程序烧录方式</title>
      <link>https://blog.ronan.us.kg/posts/stm32%E7%A8%8B%E5%BA%8F%E7%83%A7%E5%BD%95%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:02 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/stm32%E7%A8%8B%E5%BA%8F%E7%83%A7%E5%BD%95%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;以下以stm32f103c8t6芯片为例&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;使用stlink&#34;&gt;使用stlink&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;st-flash write /path/project/build.bin 0x08000000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;st-flash&lt;/code&gt; 命令需要提前安装 stlink ，macOS 通过&lt;code&gt;brew install stlink&lt;/code&gt;即可安装。&lt;/li&gt;&#xA;&lt;li&gt;烧写 &lt;code&gt;.bin&lt;/code&gt; 文件需要指定 flash 起始地址，也就是 &lt;code&gt;0x08000000&lt;/code&gt;(具体芯片具体地址根据手册修改)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;使用openocd&#34;&gt;使用openocd&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;program /path/project/build.bin verify reset exit 0x08000000&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据自己的stlink 实际版本更改&lt;code&gt;interface/stlink-v2.cfg&lt;/code&gt;为适配的 stlink 配置文件&lt;/li&gt;&#xA;&lt;li&gt;根据自己的stm32单片机实际型号更改&lt;code&gt;target/stm32f1x.cfg&lt;/code&gt;为适配的配置文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;使用stm32_programmer_cli串口烧录&#34;&gt;使用STM32_Programmer_CLI（串口烧录）&lt;/h1&gt;&#xA;&lt;p&gt;使用该方法之前需要安装&lt;code&gt;STM32_Programmer_CLI&lt;/code&gt;，该程序可以到 ST（意法半导体）官网自行下载，需要将其添加到环境变量。之后将串口线正确接到板子上的引脚，通过以下命令将程序文件烧录到单片机中。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;STM32_Programmer_CLI -c port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/tty.usbmodem11403 -w /path/project/build.bin 0x08000000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样的，烧录.bin 文件需要指定 flash 起始地址。&lt;/p&gt;&#xA;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;port=&lt;/code&gt;后面是串口号，mac 以及 linux 可以通过&lt;code&gt;ls /dev/tty.*&lt;/code&gt;命令来查看串口号，Windows 一般是&lt;code&gt;COMx&lt;/code&gt;，可以通过&lt;code&gt;设备管理器&lt;/code&gt;查看。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>手动搭建 stm32 标准外设库&#43;Makefile工程</title>
      <link>https://blog.ronan.us.kg/posts/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BA-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93&#43;makefile%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Tue, 22 Oct 2024 13:29:00 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BA-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93&#43;makefile%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本教程以 &lt;strong&gt;stm32f407&lt;/strong&gt; 为例，其他 stm32 芯片配置方式大同小异。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;1下载官方标准外设库&#34;&gt;1.下载官方标准外设库&lt;/h1&gt;&#xA;&lt;p&gt;进入 &lt;a href=&#34;https://www.st.com.cn/zh/embedded-software/stm32-standard-peripheral-libraries.html&#34;&gt;ST 官网的嵌入式软件板块&lt;/a&gt; ，根据自身板子型号选择，有F0-F4多种型号。&lt;/p&gt;&#xA;&lt;p&gt;之后根据提示选择下载即可，如果没有意外的话，应该会获得一个类似 &lt;strong&gt;en.stsw-stm32065_v1-9-0.zip(这是 F4 的标准库)&lt;/strong&gt; 的压缩包。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2创建工程&#34;&gt;2.创建工程&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21建立工程结构&#34;&gt;2.1建立工程结构&lt;/h2&gt;&#xA;&lt;p&gt;1.解压从官网下载的标准外设库 &lt;strong&gt;en.stsw-stm32065_v1-9-0.zip&lt;/strong&gt; ，获得一个 &lt;strong&gt;STM32F4xx_DSP_StdPeriph_Lib_V1.9.0&lt;/strong&gt; 目录&lt;/p&gt;&#xA;&lt;p&gt;2.新建一个&lt;code&gt;my_project&lt;/code&gt;目录，并在该目录下创建四个子目录：&lt;code&gt;driver&lt;/code&gt;、&lt;code&gt;include&lt;/code&gt;、&lt;code&gt;lib&lt;/code&gt;、&lt;code&gt;src&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;3.将标准固件库目录&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Include&lt;/code&gt;文件夹，以及固件库文件目录&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO&lt;/code&gt;文件夹，全部拷贝到&lt;code&gt;my_project/cmsis&lt;/code&gt;文件夹下&lt;/p&gt;&#xA;&lt;p&gt;4.将标准固件库文件目录&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/STM32F4xx_StdPeriph_Driver&lt;/code&gt;文件夹下的&lt;code&gt;inc&lt;/code&gt;和&lt;code&gt;src&lt;/code&gt;文件夹全部拷贝移植到&lt;code&gt;lib&lt;/code&gt;文件夹下&lt;/p&gt;&#xA;&lt;p&gt;5.将标准固件库文件目录&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Include&lt;/code&gt;文件夹目录下的&lt;code&gt;stm32f4xx.h&lt;/code&gt;、&lt;code&gt;system_stm32f4xx.h&lt;/code&gt;文件拷贝到&lt;code&gt;include&lt;/code&gt;文件夹下&lt;/p&gt;&#xA;&lt;p&gt;6.将标准固件文件目录&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates&lt;/code&gt;目录下的&lt;code&gt;main.c&lt;/code&gt;、&lt;code&gt;stm32f4xx_it.c&lt;/code&gt;、&lt;code&gt;system_stm32f4xx.c&lt;/code&gt;拷贝移植到&lt;code&gt;src&lt;/code&gt;文件夹下，&lt;code&gt;stm32f4xx_conf.h&lt;/code&gt;、&lt;code&gt;stm32f4xx_it.h&lt;/code&gt;拷贝到&lt;code&gt;include&lt;/code&gt;文件夹中，其中main.c文件是STM32工程文件的主函数程序,(main.c 也可以不拷贝，自行创建即可)&lt;/p&gt;&#xA;&lt;p&gt;7.将标准固件库文件目录&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/TrueSTUDIO/STM32F40_41xxx&lt;/code&gt;文件夹下的&lt;code&gt;STM32F417IG_FLASH.ld&lt;/code&gt;拷贝到&lt;code&gt;my_project&lt;/code&gt;的工程根目录下，并重命名为&lt;strong&gt;stm32_flash.ld&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;22编写-makefile&#34;&gt;2.2编写 Makefile&lt;/h2&gt;&#xA;&lt;p&gt;到这里我们需要自行手动编写一个 Makefile&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;逗你玩呢，我已经写好了，请慢用：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CROSS_COMPILE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arm-none-eabi-&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将源文件放在这里 (*.c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;SRCDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LIBDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./lib/src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SRC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;wildcard &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;LIBDIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/*.c&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;  &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;wildcard &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SRCDIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/*.c&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将以该名称生成二进制文件 (.elf, .bin, .hex)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 编译器设置。仅编辑 CFLAGS 以包含其他头文件。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CROSS_COMPILE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CROSS_COMPILE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CROSS_COMPILE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OBJCOPY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CROSS_COMPILE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;objcopy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# compiler flags 编译器标志&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -g -O2 -Wall -Tstm32_flash.ld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -DUSE_STDPERIPH_DRIVER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -D STM32F40_41xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -mlittle-endian -mthumb -mcpu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cortex-m4 -mthumb-interwork&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -mfloat-abi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hard -mfpu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fpv4-sp-d16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -I .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -specs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nosys.specs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 包含 STM 库中的文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -I./cmsis/Include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -I./include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; -I./lib/inc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SRC &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ./cmsis/TrueSTUDIO/startup_stm32f40_41xxx.s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将 SRC 中每个 .c 文件的扩展名替换为 .o，生成对应的目标文件。例如，如果 SRC 中有一个文件 main.c，它会生成 main.o，以便后续编译和链接时使用这些目标文件。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;OBJS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;SRC:.c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.o&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;vpath&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%.c&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./lib/src&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;vpath&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%.c&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./src&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; proj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;proj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proj&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.elf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$(PROJECT_NAME).elf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;SRC&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CC&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; $^ -o $@&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OBJCOPY&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -O ihex &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.elf &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;OBJCOPY&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -O binary &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.elf &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;rm -f *.o &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.elf &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.hex &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;flash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;proj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;st-flash write &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.bin Ox8000000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;STM32_Programmer_CLI -c port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SWD -w &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECT_NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.hex &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将以上内容复制并保存为&lt;code&gt;Makefile&lt;/code&gt;，将其放到&lt;code&gt;my_project&lt;/code&gt;工程根目录下&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB调试</title>
      <link>https://blog.ronan.us.kg/posts/gdb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:58 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/gdb%E8%B0%83%E8%AF%95/</guid>
      <description>&lt;p&gt;gdb 是由 GNU 软件系统社区提供的调试器，同 gcc 配套组成了一套完整的开发环境，可移植性很好，支持非常多的体系结构并被移植到各种系统中（包括各种类 Unix 系统与 Windows 系统里的 MinGW 和 Cygwin ）。此外，除了 C 语言之外，gcc/gdb 还支持包括 C++、Objective-C、Ada 和 Pascal 等各种语言后端的编译和调试。 gcc/gdb 是 Linux 和许多类 Unix 系统中的标准开发环境，Linux 内核也是专门针对 gcc 进行编码的。&lt;/p&gt;&#xA;&lt;p&gt;gdb 的吉祥物是专门捕杀 bug 的射手鱼，官方有这样一段描述:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;For a fish, the archer fish is known to shoot down bugs from low hanging plants by spitting water at them.&lt;/p&gt;&#xA;&lt;p&gt;作为一种鱼，射手鱼以喷水射下低垂的植物上的虫子而闻名。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;GDB 是一套字符界面的程序集，可以使用命令 gdb 加载要调试的程序。 下面为大家介绍一些常用的GDB调试命令。&lt;/p&gt;&#xA;&lt;h1 id=&#34;1调试准备&#34;&gt;1.调试准备&lt;/h1&gt;&#xA;&lt;p&gt;项目程序如果是为了进行调试而编译时， 必须要打开调试选项(&lt;code&gt;-g&lt;/code&gt;)。另外还有一些可选项，比如: 在尽量不影响程序行为的情况下关掉编译器的优化选项(&lt;code&gt;-O0&lt;/code&gt;)，&lt;code&gt;-Wall&lt;/code&gt;选项打开所有 warning，也可以发现许多问题，避免一些不必要的 bug。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;-g&lt;/code&gt;选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条机器指令对应源代码的第几行，但并不是把整个源文件嵌入到可执行文件中，所以在调试时必须保证gdb能找到源文件。&lt;/p&gt;&#xA;&lt;p&gt;习惯上如果是c程序就使用gcc编译, 如果是 c++程序就使用g++编译, 编译命令中添加上边提到的参数即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>静态库与动态库</title>
      <link>https://blog.ronan.us.kg/posts/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:57 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</guid>
      <description>&lt;p&gt;不管是Linux还是Windows中的库文件其本质和工作模式都是相同的, 只不过在不同的平台上库对应的文件格式和文件后缀不同。程序中调用的库有两种&lt;code&gt;静态库&lt;/code&gt;和&lt;code&gt;动态库&lt;/code&gt;，不管是哪种库文件本质是还是源文件，只不过是二进制格式只有计算机能够识别，作为一个普通人就无能为力了。&lt;/p&gt;&#xA;&lt;p&gt;在项目中使用库一般有两个目的，一个是为了使程序更加简洁不需要在项目中维护太多的源文件，另一方面是为了源代码保密，毕竟不是所有人都想把自己编写的程序开源出来。&lt;/p&gt;&#xA;&lt;p&gt;当我们拿到了库文件（动态库、静态库）之后要想使用还必须有这些库中提供的API函数的声明，也就是头文件，把这些都添加到项目中，就可以快乐的写代码了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1静态库&#34;&gt;1.静态库&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在Linux中静态库由程序 ar 生成，现在静态库已经不像之前那么普遍了，这主要是由于程序都在使用动态库。关于静态库的命名规则如下:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在Linux中静态库以lib作为前缀, 以.a作为后缀, 中间是库的名字自己指定即可, 即: libxxx.a&lt;/li&gt;&#xA;&lt;li&gt;在Windows中静态库一般以lib作为前缀, 以lib作为后缀, 中间是库的名字需要自己指定, 即: libxxx.lib&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;11生成静态链接库&#34;&gt;1.1生成静态链接库&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;生成静态库，需要先对源文件进行汇编操作 (&lt;code&gt;使用参数 -c&lt;/code&gt;) 得到二进制格式的目标文件 (&lt;code&gt;.o 格式&lt;/code&gt;), 然后在通过&lt;code&gt; ar&lt;/code&gt;工具将目标文件打包就可以得到静态库文件了 (&lt;code&gt;libxxx.a&lt;/code&gt;)。&lt;/p&gt;&#xA;&lt;p&gt;使用&lt;code&gt;ar&lt;/code&gt;工具创建静态库的时候需要三个参数:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;参数c&lt;/code&gt;：创建一个库，不管库是否存在，都将创建。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;参数s&lt;/code&gt;：创建目标文件索引，这在创建较大的库时能加快时间。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;参数r&lt;/code&gt;：在库中插入模块(替换)。默认新的成员添加在库的结尾处，如果模块名已经在库中存在，则替换同名的模块。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/lib1.png&#34; data-dimbox data-dimbox-caption=&#34;img&#34;&gt;&#xA;  &lt;img alt=&#34;img&#34; src=&#34;https://imgs.ronan.us.kg/lib1.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;生成静态链接库的具体步骤如下:&lt;/p&gt;&#xA;&lt;p&gt;1.需要将源文件进行汇编, 得到 .o 文件, 需要使用参数 -c&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 执行如下操作, 默认生成二进制的 .o 文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -c 参数位置没有要求&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc 源文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*.c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; -c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 提示头文件找不到, 添加参数 -I 重新头文件路径即可&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc 源文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*.c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; -c -I /path/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.将得到的 .o 进行打包, 得到静态库&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar rcs 静态库的名字&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libxxx.a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 原材料&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.发布静态库&lt;/p&gt;</description>
    </item>
    <item>
      <title>什么是价值观？</title>
      <link>https://blog.ronan.us.kg/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%B7%E5%80%BC%E8%A7%82/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:54 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%B7%E5%80%BC%E8%A7%82/</guid>
      <description>&lt;p&gt;注意：价值观指的是人们认为较有价值的观念（常常不曾言明）。它们树立了一定的行为准则，我们据此来衡量人类行为的品质高下。&lt;/p&gt;&#xA;&lt;p&gt;你在列举价值观的时候是否遇到了困难？价值观就是我们自己所认可的行为准则，我们希望他人的言行能与之相一致。当我们期望政治代表们能“实话实说”时，我们向他们和我们自身暗示的信息就是：诚实是我们最重视的价值观之一.你可以问间自己，你希望自己的朋友都是些什么样的人，你希望自己的孩子被培养出什么样的行为准则.对诸如此类问题的求解可以帮助你拓宽对价值观的理解.&lt;/p&gt;</description>
    </item>
    <item>
      <title>个人自用vim配置文件</title>
      <link>https://blog.ronan.us.kg/posts/%E4%B8%AA%E4%BA%BA%E8%87%AA%E7%94%A8vim%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:52 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E4%B8%AA%E4%BA%BA%E8%87%AA%E7%94%A8vim%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;将以下内容写入 &lt;code&gt;.vimrc&lt;/code&gt; 中&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34; 开启系统剪切板&#xA;set clipboard=unnamedplus&#xA;&#xA;&#xA;&amp;#34; 将 jk 映射为 Esc&#xA;inoremap jk &amp;lt;Esc&amp;gt;&#xA;&#xA;&#xA;&amp;#34; 开启行号显示&#xA;set nu&#xA;&#xA;&#xA;&amp;#34; 开启自动缩进并将 tab 键设置为四个空格长度&#xA;set autoindent&#xA;set shiftwidth=4&#xA;set tabstop=4&#xA;set expandtab&#xA;&#xA;&#xA;&amp;#34; 启用自动补全&#xA;set omnifunc=syntaxcomplete#Complete&#xA;&#xA;&amp;#34; 设置自动匹配括号&#xA;&amp;#34; inoremap ( ()&amp;lt;Left&amp;gt;&#xA;inoremap { {}&amp;lt;Left&amp;gt;&#xA;inoremap [ []&amp;lt;Left&amp;gt;&#xA;&#xA;&#xA;&amp;#34; 设置代码语法高亮&#xA;syntax on&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>JavaScript</title>
      <link>https://blog.ronan.us.kg/posts/javascript/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:50 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/javascript/</guid>
      <description>&lt;h1 id=&#34;对象概述&#34;&gt;对象概述&lt;/h1&gt;&#xA;&lt;p&gt;什么是对象？对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型&lt;/p&gt;&#xA;&lt;p&gt;简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/js1.png&#34; data-dimbox data-dimbox-caption=&#34;img&#34;&gt;&#xA;  &lt;img alt=&#34;img&#34; src=&#34;https://imgs.ronan.us.kg/js1.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itbaizhan&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对象的每一个键名又称为“属性”（property），它的“键&lt;/p&gt;&#xA;&lt;p&gt;值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itbaizhan&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// itbaizhan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果属性的值还是一个对象，就形成了链式引用&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;itbaizhan&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;frontEnd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web前端&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Android&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iOS&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;backEnd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;frontEnd&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// [&amp;#34;Web前端&amp;#34;,&amp;#34;Android&amp;#34;,&amp;#34;iOS&amp;#34;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;math对象&#34;&gt;Math对象&lt;/h1&gt;&#xA;&lt;p&gt;Math是 JavaScript 的原生对象，提供各种数****学功能。&lt;/p&gt;&#xA;&lt;h3 id=&#34;mathabs&#34;&gt;Math.abs()&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Math.abs&lt;/code&gt;方法返回参数值的绝对值&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mathmaxmathmin&#34;&gt;Math.max()，Math.min()&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Math.max&lt;/code&gt;方法返回参数之中最大的那个值，&lt;code&gt;Math.min&lt;/code&gt;返回最小的那个值。如果参数为空, &lt;code&gt;Math.min&lt;/code&gt;返回&lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;Math.max&lt;/code&gt;返回&lt;code&gt;-Infinity&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// -1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// Infinity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// -Infinity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mathfloormathceil&#34;&gt;Math.floor()，Math.ceil()&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Math.floor&lt;/code&gt;方法返回小于参数值的最大整数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// -4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Math.ceil&lt;/code&gt;方法返回大于参数值的最小整数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;ceil&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;ceil&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// -3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mathrandom&#34;&gt;Math.random()&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Math.random()&lt;/code&gt;返回0到1之间的一个伪随机数，可能等于0，但是一定小于1&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Python」异常处理</title>
      <link>https://blog.ronan.us.kg/posts/python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:48 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;在 Python 中，常见的基本错误有两类，即语法错误和异常。对于语法错误，应该在程序编写过程中尽量予以避免，在程序调试中消除。而异常是 Python 程序在运行过程中引发的错误，如果程序中引发了未进行处理的异常，程序就会由于异常而终止运行，只有为程序添加异常处理，才能使程序更具健壮性。&lt;/p&gt;&#xA;&lt;h1 id=&#34;1语法错误&#34;&gt;1.语法错误&lt;/h1&gt;&#xA;&lt;p&gt;语法错误是所有编程语言中都存在的一种常见错误，即程序的洗发不符合编程语言的规定。常见的语法错误有：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;拼写错误（SyntaxError、NameError），即 Python 语言中的关键字写错，变量名，函数名拼写错误等。&lt;/li&gt;&#xA;&lt;li&gt;脚本程序不符合 Python 的语法规范，例如少了括号，冒号等，以及表达式书写错误等。&lt;/li&gt;&#xA;&lt;li&gt;缩进错误，因为 Python 语法规定，以缩进作为程序的语法之一。一般来说，Python 标准的缩进是以 4 个空格或一个 Tab 作为一个缩进，但同一个程序或项目中应该统一使用同一种缩进风格。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;2异常处理&#34;&gt;2.异常处理&lt;/h1&gt;&#xA;&lt;p&gt;异常是 Python 程序在运行过程中引发的错误。如果程序中引发了未进行处理的异常，脚本就会由于异常而终止运行。只有在程序中捕获这些异常，并进行相关的处理，才能使程序不会中断运行。&lt;/p&gt;&#xA;&lt;p&gt;Python 中使用 &lt;code&gt;try...except&lt;/code&gt; 语句来说处理异常，基本形式如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;语句&amp;#39;&lt;/span&gt;&#x9; &lt;span style=&#34;color:#75715e&#34;&gt;# 可能产生异常的语句&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;异常名 1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# 要处理的第一类异常&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;语句&amp;#39;&lt;/span&gt;&#x9; &lt;span style=&#34;color:#75715e&#34;&gt;# 异常的处理语句&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;异常名 1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# 要处理的第二类异常&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;语句&amp;#39;&lt;/span&gt;&#x9; &lt;span style=&#34;color:#75715e&#34;&gt;# 异常的处理语句&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;语句&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 未触发异常，则执行该语句&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;语句&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 始终执行该语句，一般为了达到释放资源等目的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：else 语句在未引发异常情况下得到运行。&lt;/p&gt;&#xA;&lt;p&gt;首先，我们先演示一个最简单的案例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 函数名错误, print 误写成 printt&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NameError: name &amp;#39;printt&amp;#39; is not defined&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用异常捕获&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 函数名错误, print 误写成 printt&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;捕获到了异常&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;/p&gt;</description>
    </item>
    <item>
      <title>sdcc编译与链接</title>
      <link>https://blog.ronan.us.kg/posts/sdcc%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:46 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/sdcc%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/</guid>
      <description>&lt;h2 id=&#34;1编译源文件&#34;&gt;1.编译源文件&lt;/h2&gt;&#xA;&lt;p&gt;首先，你需要编译你的源文件（例如 &lt;code&gt;main.c&lt;/code&gt;）以生成目标文件（.rel）。你可以使用以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc -c main.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条命令会生成 &lt;code&gt;main.rel&lt;/code&gt; 文件。&lt;/p&gt;&#xA;&lt;p&gt;如果你的库文件不在当前目录下并且提示头文件未找到，你可以通过 &lt;code&gt;-I&lt;/code&gt; 选项指定包含文件的路径,然后使用绝对路径指定库，例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc  -I/path/to/include -c /path/to/src/main.c &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条命令也会生成 &lt;code&gt;main.rel&lt;/code&gt; 文件。&lt;/p&gt;&#xA;&lt;p&gt;如果不希望生成的目录挤在和main.c相同目录下，可以通过&lt;code&gt;-o&lt;/code&gt;参数指定&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc -c main.c -o /path/to/build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2编译其他库文件&#34;&gt;2.编译其他库文件&lt;/h2&gt;&#xA;&lt;p&gt;假设你有其他的库文件（例如 &lt;code&gt;library.c&lt;/code&gt;），你需要同样地将它们编译成目标文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc -c library.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条命令会生成 &lt;code&gt;library.rel&lt;/code&gt; 文件。&lt;/p&gt;&#xA;&lt;p&gt;你需要编译的库文件是以 &lt;code&gt;.lib&lt;/code&gt; 或者 &lt;code&gt;.a&lt;/code&gt; 结尾的，你可以在编译命令中指定这些库文件。&lt;/p&gt;&#xA;&lt;p&gt;如果你的库文件不在当前目录下并且提示头文件未找到，你可以通过 &lt;code&gt;-I&lt;/code&gt; 选项指定包含文件的路径,然后使用绝对路径指定库，例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc  -I/path/to/include -c /path/to/lib/library.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条命令也会生成 &lt;code&gt;library.rel&lt;/code&gt; 文件。&lt;/p&gt;&#xA;&lt;p&gt;如果不希望生成的目录挤在和main.c相同目录下，可以通过&lt;code&gt;-o&lt;/code&gt;参数指定&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc -c library.c -o /path/to/build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3链接所有目标文件&#34;&gt;3.链接所有目标文件&lt;/h2&gt;&#xA;&lt;p&gt;一旦你有了所有的目标文件，你就可以将它们链接起来生成最终的二进制文件。你可以使用以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc main.rel library.rel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条命令会生成一个可执行文件（例如 &lt;code&gt;a.out&lt;/code&gt; 或者具体取决于你编译的目标平台）。&lt;/p&gt;&#xA;&lt;p&gt;例如，生成&lt;code&gt;.hex&lt;/code&gt;文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sdcc -o out.hex main.rel library.rel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;综合实例&#34;&gt;综合实例&lt;/h2&gt;&#xA;&lt;p&gt;假设你的项目结构如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>「macOS」neovide初始化错误、常见问题</title>
      <link>https://blog.ronan.us.kg/posts/macosneovide%E5%88%9D%E5%A7%8B%E5%8C%96%E9%94%99%E8%AF%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:44 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/macosneovide%E5%88%9D%E5%A7%8B%E5%8C%96%E9%94%99%E8%AF%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;在 M1 macOS 中下载 neovide 之后打开遇到：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/neovide_error.png&#34; data-dimbox data-dimbox-caption=&#34;error&#34;&gt;&#xA;  &lt;img alt=&#34;error&#34; src=&#34;https://imgs.ronan.us.kg/neovide_error.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 id=&#34;原因分析&#34;&gt;原因分析&lt;/h4&gt;&#xA;&lt;p&gt;由于现在所有的 macOS 版本内置终端都是默认使用 zsh ，但是 Neovide 不会在交互式 shell 中启动嵌入式 neovim 实例，因此 shell 不会读取其启动文件的一部分（ &lt;code&gt;~/.bashrc&lt;/code&gt; &lt;code&gt;~/.zshrc&lt;/code&gt; 无论你的 shell 的等效项是什么）。&lt;/p&gt;&#xA;&lt;h4 id=&#34;解决方法&#34;&gt;解决方法&lt;/h4&gt;&#xA;&lt;p&gt;1.首先找到当前安装的 neovim 路径，通过 &lt;code&gt;which nvim&lt;/code&gt; 查看，例如&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;❯ which nvim&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/homebrew/bin/nvim&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/opt/homebrew/bin/nvim&lt;/code&gt; 就是 nvim 的路径，记住它！！！&lt;/p&gt;&#xA;&lt;p&gt;2.根据自己的 shell，例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于 zsh，将 &lt;code&gt;export PATH=&amp;quot;/opt/homebrew/bin:$PATH&amp;quot;&lt;/code&gt;  放入 &lt;code&gt;~/.zprofile&lt;/code&gt; 或 &lt;code&gt;~/.zlogin&lt;/code&gt; 中。&lt;/li&gt;&#xA;&lt;li&gt;对于 bash，将 &lt;code&gt;export PATH=&amp;quot;/opt/homebrew/bin:$PATH&amp;quot;&lt;/code&gt;  放入 &lt;code&gt;~/.profile&lt;/code&gt; 。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>「Gmeek」文章插入html标签以及图片源地址渲染</title>
      <link>https://blog.ronan.us.kg/posts/gmeek%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5html%E6%A0%87%E7%AD%BE%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E6%BA%90%E5%9C%B0%E5%9D%80%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:43 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/gmeek%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5html%E6%A0%87%E7%AD%BE%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E6%BA%90%E5%9C%B0%E5%9D%80%E6%B8%B2%E6%9F%93/</guid>
      <description>&lt;h1 id=&#34;1图片使用创建文章issue时输入的原始链接&#34;&gt;1.图片使用创建文章(issue)时输入的原始链接。&lt;/h1&gt;&#xA;&lt;p&gt;通过markdown添加的图片，确实包含data-canonical-src图片的真正地址。这个只需要通过一小段js插件就能实现，而且不会误判在code中的内容被替换。&lt;br&gt;&#xA;所有文章页实现替换Camo，在config.json中添加如下配置&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;script&amp;#34;:&amp;#34;&amp;lt;script&amp;gt;document.querySelectorAll(&amp;#39;a&amp;#39;).forEach(anchor =&amp;gt; {const img = anchor.querySelector(&amp;#39;img&amp;#39;);if (img &amp;amp;&amp;amp; img.hasAttribute(&amp;#39;data-canonical-src&amp;#39;)) {const canonicalSrc = img.getAttribute(&amp;#39;data-canonical-src&amp;#39;);anchor.setAttribute(&amp;#39;href&amp;#39;, canonicalSrc);img.setAttribute(&amp;#39;src&amp;#39;, canonicalSrc);img.removeAttribute(&amp;#39;data-canonical-src&amp;#39;);}});&amp;lt;/script&amp;gt;&amp;#34;,&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;单篇文章页替换Camo，在文章页最后一行添加&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- ##{&amp;#34;script&amp;#34;:&amp;#34;&amp;lt;script&amp;gt;document.querySelectorAll(&amp;#39;a&amp;#39;).forEach(anchor =&amp;gt; {const img = anchor.querySelector(&amp;#39;img&amp;#39;);if (img &amp;amp;&amp;amp; img.hasAttribute(&amp;#39;data-canonical-src&amp;#39;)) {const canonicalSrc = img.getAttribute(&amp;#39;data-canonical-src&amp;#39;);anchor.setAttribute(&amp;#39;href&amp;#39;, canonicalSrc);img.setAttribute(&amp;#39;src&amp;#39;, canonicalSrc);img.removeAttribute(&amp;#39;data-canonical-src&amp;#39;);}});&amp;lt;/script&amp;gt;&amp;#34;}## --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;2通过html插入音乐图片和视频等&#34;&gt;2.通过html插入音乐、图片和视频等&lt;/h1&gt;&#xA;&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;&#xA;&lt;p&gt;在需要添加html标签的位置使用 &lt;code&gt;行内代码&lt;/code&gt; 方式，并且后面紧跟着 &lt;code&gt;Gmeek-html&lt;/code&gt;，然后才是html标签。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!note]&#xA;大白话：在创建文章（issue）时，写着写着想插入一张图片就可以通过两个反引号 `` 包裹住Gmeek-html以及html标签(也就是只需要将其中的src改为自己要插入的图片链接)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;图片img&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`Gmeek-html&amp;lt;img src=&amp;#34;https://picsum.photos/200&amp;#34;&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;内嵌框架iframe-网站&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`Gmeek-html&amp;lt;iframe src=&amp;#34;https://music.meekdai.com/#61&amp;#34; width=&amp;#34;100%&amp;#34; height=&amp;#34;460px&amp;#34; frameborder=&amp;#34;0&amp;#34; allowfullscreen=&amp;#34;true&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;内嵌框架iframe-歌曲&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`Gmeek-html&amp;lt;iframe style=&amp;#39;border-radius:12px&amp;#39; src=&amp;#39;https://open.spotify.com/embed/track/0U3fV7K4WFfVRgLGEAKh3g?utm_source=generator&amp;#39; width=&amp;#39;100%&amp;#39; height=&amp;#39;152&amp;#39; frameBorder=&amp;#39;0&amp;#39; allowfullscreen=&amp;#39;&amp;#39; allow=&amp;#39;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&amp;#39; loading=&amp;#39;lazy&amp;#39;&amp;gt;&amp;lt;/iframe&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Gmeek-html&amp;lt;iframe style=&#39;border-radius:12px&#39; src=&#39;//music.163.com/outchain/player?type=2&amp;amp;id=545590290&amp;amp;auto=1&#39; width=&#39;100%&#39; height=&#39;152&#39; frameBorder=&#39;0&#39; allowfullscreen=&#39;&#39; allow=&#39;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&#39; loading=&#39;lazy&#39;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Gmeek」小Tips以及常见问题</title>
      <link>https://blog.ronan.us.kg/posts/gmeek%E5%B0%8Ftips%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:41 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/gmeek%E5%B0%8Ftips%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;修改文章发布时间&#34;&gt;修改文章发布时间&lt;/h1&gt;&#xA;&lt;p&gt;如需修改发布时间，可以在文章 &lt;code&gt;最后一行(后面不能有空行)&lt;/code&gt; 添加如下代码。里面的时间是采用时间戳的形式，可以用如下 &lt;a href=&#34;https://tool.lu/timestamp&#34;&gt;网站&lt;/a&gt; 转换。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- ##{&amp;#34;timestamp&amp;#34;:1490764800}## --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;折叠代码块&#34;&gt;折叠代码块&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;details&amp;gt;&#xA;    &amp;lt;summary&amp;gt;点我展开看代码&amp;lt;/summary&amp;gt;&#xA;    &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&#xA;# 这里空一行，下面开始写代码&#xA;# 在这里写折叠的代码&#xA;# 最后这两行结束标签一定要顶格写且不能接在代码后面！！！&#xA;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#xA;&amp;lt;/details&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;示例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#34;Just a test&amp;#34;      # 在这里写折叠的代码&#xA;# 最后这两行结束标签一定要顶格写且不能接在代码后面！！！&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h1 id=&#34;书写公式&#34;&gt;书写公式&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$$&#xA;E=mc^2&#xA;$$&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;示例&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;$$&#xA;E=mc^2&#xA;$$&lt;/p&gt;&#xA;&lt;h1 id=&#34;强调关键信息&#34;&gt;强调关键信息&lt;/h1&gt;&#xA;&lt;p&gt;Github的语法里面有5中警报强调信息，分别是&lt;code&gt;NOTE&lt;/code&gt;、 &lt;code&gt;TIP&lt;/code&gt;、 &lt;code&gt;IMPORTANT&lt;/code&gt;、 &lt;code&gt;WARNING&lt;/code&gt;、 &lt;code&gt;CAUTION&lt;/code&gt; 。在写文章的时候，适当使用可以提高文章的可读性，并且颜色也更加丰富。下面就简单描述一下使用方式，以及效果如何。&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用方式&#34;&gt;使用方式&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; [!NOTE]&#xA;&amp;gt; Useful information that users should know, even when skimming content.&#xA;&#xA;&amp;gt; [!TIP]&#xA;&amp;gt; Helpful advice for doing things better or more easily.&#xA;&#xA;&amp;gt; [!IMPORTANT]&#xA;&amp;gt; Key information users need to know to achieve their goal.&#xA;&#xA;&amp;gt; [!WARNING]&#xA;&amp;gt; Urgent info that needs immediate user attention to avoid problems.&#xA;&#xA;&amp;gt; [!CAUTION]&#xA;&amp;gt; Advises about risks or negative outcomes of certain actions.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;效果展示&#34;&gt;效果展示&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!NOTE]&#xA;Useful information that users should know, even when skimming content.&#xA;用户即使在浏览内容时也应该了解的有用信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>个人自用 stm32 工程模板程序</title>
      <link>https://blog.ronan.us.kg/posts/%E4%B8%AA%E4%BA%BA%E8%87%AA%E7%94%A8-stm32-%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:39 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E4%B8%AA%E4%BA%BA%E8%87%AA%E7%94%A8-stm32-%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;注意文件位置：&lt;code&gt;/Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 检查是否提供了工程名参数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;使用方法: &lt;/span&gt;$0&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;lt;工程名&amp;gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取工程名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;project_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建工程根目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$project_name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$project_name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;根目录已存在: &lt;/span&gt;$project_name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建子目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir in src lib include cmsis; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$project_name&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;$dir&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$project_name&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;$dir&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;子目录已存在: &lt;/span&gt;$project_name&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;$dir&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#cmsis&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Include &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/cmsis/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Source/Templates/TrueSTUDIO &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/cmsis/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#lib&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/STM32F4xx_StdPeriph_Driver/inc &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/lib/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/STM32F4xx_StdPeriph_Driver/src &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/lib/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/include/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/include/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/stm32f4xx_conf.h &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/include/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/stm32f4xx_it.h &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/include/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#src&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/stm32f4xx_it.c &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/src/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/system_stm32f4xx.c &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/src/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /Users/iaa/bin/STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates/TrueSTUDIO/STM32F40_41xxx/STM32F417IG_FLASH.ld &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mv &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/STM32F417IG_FLASH.ld &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/stm32_flash.ld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建Makefile文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Makefile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Makefile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CROSS_COMPILE = arm-none-eabi-&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# 将源文件放在这里 (*.c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SRCDIR=./src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LIBDIR=./lib/src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SRC = \$(wildcard \${LIBDIR}/*.c) \\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      \$(wildcard \${SRCDIR}/*.c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# 将以该名称生成二进制文件 (.elf, .bin, .hex)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PROJECT_NAME=out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# 编译器设置。仅编辑 CFLAGS 以包含其他头文件。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CC = \$(CROSS_COMPILE)gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;AS = \$(CROSS_COMPILE)as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LD = \$(CROSS_COMPILE)gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OBJCOPY = \$(CROSS_COMPILE)objcopy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# compiler flags 编译器标志&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS = -g -O2 -Wall -Tstm32_flash.ld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -DUSE_STDPERIPH_DRIVER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -D STM32F40_41xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -mlittle-endian -mthumb -mcpu=cortex-m4 -mthumb-interwork&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -I .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -specs=nosys.specs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# 包含 STM 库中的文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -I./cmsis/Include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -I./include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CFLAGS += -I./lib/inc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SRC += ./cmsis/TrueSTUDIO/startup_stm32f40_41xxx.s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# 将 SRC 中每个 .c 文件的扩展名替换为 .o，生成对应的目标文件。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OBJS = \$(SRC:.c=.o)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vpath %.c ./lib/src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vpath %.c ./src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.PHONY: proj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;all: proj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;proj: \$(PROJECT_NAME).elf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\$(PROJECT_NAME).elf: \$(SRC)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\$(CC) \$(CFLAGS) \$^ -o \$@&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\$(OBJCOPY) -O ihex \$(PROJECT_NAME).elf \$(PROJECT_NAME).hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\$(OBJCOPY) -O binary \$(PROJECT_NAME).elf \$(PROJECT_NAME).bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;clean:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;rm -f *.o \$(PROJECT_NAME).elf \$(PROJECT_NAME).hex \$(PROJECT_NAME).bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;flash: proj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;STM32_Programmer_CLI -c port=SWD -w \$(PROJECT_NAME).hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Makefile 已生成在: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Makefile&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Makefile 已存在: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Makefile&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建 main.c&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/main.c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/main.c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#include&amp;lt;stm32f4xx.h&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;int main(void)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    while(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main.c 已生成在：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/main.c&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main.c 已存在&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/syscalls.c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cat &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/syscalls.c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;  // 包含必要的类型定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;int _close(int file) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;int _lseek(int file, int ptr, int dir) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;int _read(int file, char *ptr, int len) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;int _write(int file, char *ptr, int len) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;caddr_t _sbrk(int incr) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    extern char _end;  // 链接器脚本中定义的堆的起始位置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    static char *heap_end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    char *prev_heap_end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    if (heap_end == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        heap_end = &amp;amp;_end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    prev_heap_end = heap_end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    heap_end += incr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return (caddr_t)prev_heap_end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/lib/src/stm32f4xx_fmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 注释掉 stm32f4xx_it.c 中的 #include &amp;#34;main.h&amp;#34; 和 TimingDelay_Decrement();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s|#include &amp;#34;main.h&amp;#34;|//&amp;amp;|&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/stm32f4xx_it.c&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s|TimingDelay_Decrement();|//&amp;amp;|&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/src/stm32f4xx_it.c&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;project_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;创建成功&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>vscode &#43; stm32CubeMX &#43; Makefile工程以及问题解决</title>
      <link>https://blog.ronan.us.kg/posts/vscode-&#43;-stm32cubemx-&#43;-makefile%E5%B7%A5%E7%A8%8B%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:37 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/vscode-&#43;-stm32cubemx-&#43;-makefile%E5%B7%A5%E7%A8%8B%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid>
      <description>&lt;p&gt;通过 STM32CubeMX 建立的 Makefile 工程，应该会有以下结构：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;❯ tree test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── Inc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── Src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Drivers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── CMSIS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── Device&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   └── ST&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │       └── STM32F1xx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           ├── Include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           ├── LICENSE.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           └── Source&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │               └── Templates&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── Include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── LICENSE.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── STM32F1xx_HAL_Driver&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── Inc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── Legacy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── LICENSE.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── Src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── STM32F103C8Tx_FLASH.ld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── startup_stm32f103xb.s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── test.ioc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;1配置本机环境&#34;&gt;1.配置本机环境&lt;/h1&gt;&#xA;&lt;p&gt;为了能顺利使用通过 STM32CubeMX 建立的 Makefile 工程，你需要先安装完成以下准备：&lt;/p&gt;</description>
    </item>
    <item>
      <title>「图床」上传脚本，基于 GitHub 仓库</title>
      <link>https://blog.ronan.us.kg/posts/%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC%E5%9F%BA%E4%BA%8E-github-%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:35 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC%E5%9F%BA%E4%BA%8E-github-%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;p&gt;使用之前需要通过 &lt;code&gt;pip install PyGithub&lt;/code&gt; 安装 github 库&lt;/p&gt;&#xA;&lt;p&gt;在 &lt;code&gt;35-37&lt;/code&gt; 行填入相应信息并将代码保存为 imgs.py：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;owner&lt;/code&gt;:github 用户名&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;:仓库名(如 imgs)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;token&lt;/code&gt;:github 私人访问令牌(要给予仓库读写权限)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;可以通过以下方法直接运行脚本或者将脚本&lt;a href=&#34;https://blog.ronan.us.kg/2024/09/02/python-%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/&#34;&gt;打包为应用程序&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用方法：&lt;code&gt;usage: python imgs.py [-h] input_file [input_file ...]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; github &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Github&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Imgs&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, owner&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, repo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;owner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; owner&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; repo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; token&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Github(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;token)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_repo(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;owner&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repo&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_new_file&lt;/span&gt;(self, img, content):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 第一个参数：要上传到仓库的哪个路径; 第二个参数：commit 信息; 第三个参数：上传文档正文; 第四个参数：上传的分支&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_file(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_imgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;img&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Newfiles: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;img&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;&lt;/span&gt;, content, branch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_img_content&lt;/span&gt;(self, img_path):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(img_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; image_file:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            img_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; image_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; img_content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;基于 echozap/imgs 的图床上传&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 传递的图片数量不确定&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input_file&amp;#39;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str, nargs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;输入图片的路径&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Imgs(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; img_path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_file:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            img_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_img_content(img_path)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            img_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(img_path) &lt;span style=&#34;color:#75715e&#34;&gt;# 获取带扩展名的文件名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_new_file(img_name, img_content)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;img_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;上传成功&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://img.ronan.us.kg/blog_imgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;img_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;status&amp;#34;: &amp;#34;422&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; str(e):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;上传 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;img_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 时发生错误: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;e&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;图片已存在&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://img.ronan.us.kg/blog_imgs/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;img_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Docker常用命令</title>
      <link>https://blog.ronan.us.kg/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:33 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/docker_command.png&#34; data-dimbox data-dimbox-caption=&#34;DockerCheatSheet.png&#34;&gt;&#xA;  &lt;img alt=&#34;DockerCheatSheet.png&#34; src=&#34;https://imgs.ronan.us.kg/docker_command.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;启动docker&#34;&gt;启动docker&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service docker start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;授予-docker-sudo-权限&#34;&gt;授予 docker sudo 权限&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker $USER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;列出所有已下载镜像&#34;&gt;列出所有已下载镜像&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;列出当前所有容器&#34;&gt;列出当前所有容器&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps -a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出详情介绍：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CONTAINER ID:&lt;/strong&gt;  容器 ID。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;IMAGE:&lt;/strong&gt;  使用的镜像。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;COMMAND:&lt;/strong&gt;  启动容器时运行的命令。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;CREATED:&lt;/strong&gt;  容器的创建时间。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;STATUS:&lt;/strong&gt;  容器状态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;状态有7种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;created（已创建）&lt;/li&gt;&#xA;&lt;li&gt;restarting（重启中）&lt;/li&gt;&#xA;&lt;li&gt;running 或 Up（运行中）&lt;/li&gt;&#xA;&lt;li&gt;removing（迁移中）&lt;/li&gt;&#xA;&lt;li&gt;paused（暂停）&lt;/li&gt;&#xA;&lt;li&gt;exited（停止）&lt;/li&gt;&#xA;&lt;li&gt;dead（死亡）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;PORTS:&lt;/strong&gt;  容器的端口信息和使用的连接类型（tcp\udp）。&#xA;&lt;strong&gt;NAMES:&lt;/strong&gt;  自动分配的容器名称。&lt;/p&gt;&#xA;&lt;h1 id=&#34;进入正在运行的容器&#34;&gt;进入正在运行的容器&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec -it &amp;lt;container_ID&amp;gt; /bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;忘记运行容器时的挂载路径&#34;&gt;忘记运行容器时的挂载路径&lt;/h1&gt;&#xA;&lt;p&gt;在运行容器时通过 -v 指定了本机的目录，但是时间久远，记不清当时指定的挂载路径是哪里。&lt;/p&gt;&#xA;&lt;p&gt;要找出已经运行的 Docker 容器的挂载卷（&lt;code&gt;-v&lt;/code&gt; 指定的路径），你可以使用以下步骤：&lt;/p&gt;&#xA;&lt;p&gt;运行以下命令来获取容器的详细信息，包括挂载卷的路径：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker inspect &amp;lt;container_name_or_id&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;在运行容器时分配内存&#34;&gt;在运行容器时分配内存&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --memory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;2g 或者 4g 可自行分配大小&amp;gt; &amp;lt;images_name_or_id&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>npm常用用法</title>
      <link>https://blog.ronan.us.kg/posts/npm%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:32 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/npm%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;你可以使用以下命令查看已经通过 &lt;code&gt;npm&lt;/code&gt; 安装的包：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-查看全局安装的包&#34;&gt;1. &lt;strong&gt;查看全局安装的包&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;要查看全局安装的所有包，可以运行以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm list -g --depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会列出所有全局安装的包，并且使用 &lt;code&gt;--depth=0&lt;/code&gt; 选项只显示顶级包，不显示它们的依赖项。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-查看本地安装的包&#34;&gt;2. &lt;strong&gt;查看本地安装的包&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;要查看在当前项目中本地安装的包（即安装在 &lt;code&gt;node_modules&lt;/code&gt; 目录下的包），可以在项目根目录中运行以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm list --depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会列出当前项目中安装的所有顶级包。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-查看全局和本地安装的包&#34;&gt;3. &lt;strong&gt;查看全局和本地安装的包&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;你可以结合 &lt;code&gt;-g&lt;/code&gt; 和 &lt;code&gt;--depth=0&lt;/code&gt; 选项来分别查看全局和本地的包列表：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局包：&lt;code&gt;npm list -g --depth=0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;本地包：&lt;code&gt;npm list --depth=0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这些命令会显示包名和版本号，让你了解已经安装的包。&lt;/p&gt;</description>
    </item>
    <item>
      <title>那天，他决定偷走一架飞机</title>
      <link>https://blog.ronan.us.kg/posts/%E9%82%A3%E5%A4%A9%E4%BB%96%E5%86%B3%E5%AE%9A%E5%81%B7%E8%B5%B0%E4%B8%80%E6%9E%B6%E9%A3%9E%E6%9C%BA/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:30 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E9%82%A3%E5%A4%A9%E4%BB%96%E5%86%B3%E5%AE%9A%E5%81%B7%E8%B5%B0%E4%B8%80%E6%9E%B6%E9%A3%9E%E6%9C%BA/</guid>
      <description>&lt;p&gt;2018年8月10日，地平线航空一架庞巴迪Dash 8 Q400在美国西雅图的塔科马国际机场（Sea-Tac）被盗。肇事者，29岁的理查·罗素（Richard Russell），是一名没有驾驶经验的地平线航空地勤人员。他进行了一次未经授权的飞行，随后两架麦克唐纳道格拉斯F-15鹰式战斗机升空进行拦截。塔科马国际机场的塔台人员与理查进行了无线电联系劝说他返回机场，最后飞机在普吉特海湾（Puget Sound）中人烟稀少的科特罗岛（Ketron island）时坠毁，事件最终造成机上人员理查·罗素遇难，事后调查认定坠毁属于人为操作导致。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;塔台：你右侧大概一英里的地方有一条跑道，你能看到吗？&lt;/p&gt;&#xA;&lt;p&gt;理查：如果我降落在那里的话，那些家伙会打我的，而且我很可能会把那里弄得一团糟，我可不想那样。对了，他们可能还有防空武器把我打下来。&lt;/p&gt;&#xA;&lt;p&gt;塔台：他们可没那些东西，我们只是想给你找一个安全降落的地方。&lt;/p&gt;&#xA;&lt;p&gt;理查：可我还没想降落呢，不过天啊，我不能再盯着燃油表看了，油用得太快了。&lt;/p&gt;&#xA;&lt;p&gt;塔台：好了，理查，如果可以的话，请你向左转，我们会指引你往东南方向飞。&lt;/p&gt;&#xA;&lt;p&gt;理查：我得判个无期徒刑吧？对我这样的人来说，我倒希望会是这样。&lt;/p&gt;&#xA;&lt;p&gt;很明显他的动机并不是想搞破坏，也不是想伤害谁。&lt;/p&gt;&#xA;&lt;p&gt;理查：我不想伤害任何人，我只是想你在我耳边说一些好听的废话……你觉得如果我能够成功降落的话，阿拉斯加航空会不会给我一份飞行员的工作？&lt;/p&gt;&#xA;&lt;p&gt;塔台：如果你能成功降落，我想他们会给你任何你想要的工作。&lt;/p&gt;&#xA;&lt;p&gt;理查：我知道有很多人关心我，他们如果知道我做了这样的事一定会失望的。我想向他们每一个人道歉。我只是一个已经坏掉的人，我猜是不知道哪里有几颗螺丝松了吧。以前我没意识到，刚刚才弄明白。&lt;/p&gt;&#xA;&lt;p&gt;塔台：如果你想降落的话，最好的机会是你左前方的那条跑道，或者还有另一个办法，就是普吉特海湾，你可以降落到海面上。&lt;/p&gt;&#xA;&lt;p&gt;理查：你和那儿的人说过了吗，我可不想把那里弄得一团糟。&lt;/p&gt;&#xA;&lt;p&gt;塔台：我已经和他们说过了，我，还有我们所有人，都不希望你或者任何其他人受伤。你如果想降落的话，就试试这个办法。&lt;/p&gt;&#xA;&lt;p&gt;理查：可我想知道那条虎鲸的位置，你知道，就是那条背着宝宝的虎鲸。我想去看看那家伙。&lt;/p&gt;&#xA;&lt;p&gt;于是一个人、一架飞机、两只鲸鱼，就这样奇妙的联系在一起了。&lt;/p&gt;&#xA;&lt;p&gt;理查：我准备降落了，我想我会先做几个翻滚，如果成功的话，我就会开始下降，今晚就到此结束了。（第一次开飞机的理查，在面对战斗机追踪的情况下，还完了一个超难度的飞行动作。这个动作一般是战斗机才会做的，他驾驶的这种客机不会。）&lt;/p&gt;&#xA;&lt;p&gt;塔台：理查，如果可以的话，请尽量把飞机贴近水面。&lt;/p&gt;&#xA;&lt;p&gt;理查：我有点头晕。哥们，旁边的景色过得好快，我在想，我要好好看着这些风景，享受这一刻的宁静。一切都很美，但如果从另一个角度来看，它们就更美了。&lt;/p&gt;&#xA;&lt;p&gt;塔台：你能看清楚周围的地形吗？能见度有没有问题？&lt;/p&gt;&#xA;&lt;p&gt;理查：没有，一切都非常清楚。我刚刚绕着雷尼尔山飞了一小圈，很美，我想剩下来的油还够让我飞到奥林匹克山去看看。&lt;/p&gt;&#xA;&lt;p&gt;理查：我不知道该怎么降落，其实我本来就没打算降落。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Makefile</title>
      <link>https://blog.ronan.us.kg/posts/makefile/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:28 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/makefile/</guid>
      <description>&lt;h2 id=&#34;1规则&#34;&gt;1.规则&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Makefile的框架是由规则构成的。make命令执行时先在Makefile文件中查找各种规则，对各种规则进行解析后运行规则。规则的基本格式为：&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;每条规则的语法格式:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;target1,target2...: depend1, depend2, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;command&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每条规则由三个部分组成分别是&lt;code&gt;目标(target)&lt;/code&gt;, &lt;code&gt;依赖(depend)&lt;/code&gt;和&lt;code&gt;命令(command)&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;命令(command)&lt;/code&gt;: 当前这条规则的动作，一般情况下这个动作就是一个 shell 命令&#xA;例如：通过某个命令编译文件、生成库文件、进入目录等。&#xA;动作可以是多个，每个命令前必须有一个Tab缩进并且独占占一行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;依赖(depend)&lt;/code&gt;: 规则所必需的依赖条件，在规则的命令中可以使用这些依赖。&#xA;例如：生成可执行文件的目标文件（*.o）可以作为依赖使用&#xA;如果规则的命令中不需要任何依赖，那么规则的依赖可以为空&#xA;当前规则中的依赖可以是其他规则中的某个目标，这样就形成了规则之间的嵌套&#xA;依赖可以根据要执行的命令的实际需求, 指定很多个&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;目标(target)&lt;/code&gt;： 规则中的目标，这个目标和规则中的命令是对应的&#xA;通过执行规则中的命令，可以生成一个和目标同名的文件&#xA;规则中可以有多个命令, 因此可以通过这多条命令来生成多个目标, 所有目标也可以有很多个&#xA;通过执行规则中的命令，可以只执行一个动作，不生成任何文件，这样的目标被称为&lt;code&gt;伪目标&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这里看着脑疼，举个例子&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;################# 例1 #################&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;a.c b.c c.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc a.c b.c c.c -o app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;################# 例2 #################&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 有多个目标, 多个依赖, 多个命令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app,app1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;a.c b.c c.c d.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc a.c b.c -o app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc c.c d.c -o app1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;################# 例3 #################&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 规则之间的嵌套&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;a.o b.o c.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc a.o b.o c.o -o app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a.o 是第一条规则中的依赖&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a.o&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;a.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc -c a.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# b.o 是第一条规则中的依赖&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b.o&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;b.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc -c b.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# c.o 是第一条规则中的依赖&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c.o&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;c.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gcc -c c.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2规则的执行&#34;&gt;2.规则的执行&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;在调用 make 命令编译程序的时候，make 会首先找到 Makefile 文件中的第 1 个规则，分析并执行相关的动作。&lt;/code&gt;但是需要注意的是，好多时候要执行的动作（命令）中使用的依赖是不存在的，如果使用的依赖不存在，这个动作也就不会被执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「platformIO」基于 stm32 HAL库 的工程模板</title>
      <link>https://blog.ronan.us.kg/posts/platformio%E5%9F%BA%E4%BA%8E-stm32-hal%E5%BA%93-%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:26 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/platformio%E5%9F%BA%E4%BA%8E-stm32-hal%E5%BA%93-%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;h1 id=&#34;1建立-makefile-工程&#34;&gt;1.建立 Makefile 工程&lt;/h1&gt;&#xA;&lt;p&gt;通过 STM32CubeMX 建立适于自己开发版的 Makefile 工程（步骤不赘述，百度一下，你就知道），并且记住「&lt;strong&gt;工程名&lt;/strong&gt;」和「&lt;strong&gt;工程存放路径&lt;/strong&gt;」。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2新建-platformio-工程&#34;&gt;2.新建 platformIO 工程&lt;/h1&gt;&#xA;&lt;p&gt;新建 platformIO 工程时的「Framework」&lt;strong&gt;一定要选择「STM32Cube」&lt;/strong&gt;，新建工程的「&lt;strong&gt;工程名&lt;/strong&gt;」和「&lt;strong&gt;工程存放路径&lt;/strong&gt;」要与之前建立的 Makefile 工程&lt;strong&gt;一致&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;工程建立完成后，你应该会得到如下项目结构：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── Inc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── gpio.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── main.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── Src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── gpio.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── main.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Drivers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── CMSIS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── Device&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   └── ST&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │       └── STM32F1xx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           ├── Include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           │   ├── stm32f103xb.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           │   ├── stm32f1xx.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           │   └── system_stm32f1xx.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           ├── LICENSE.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │           └── Source&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │               └── Templates&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── Include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── cmsis_armcc.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── cmsis_armclang.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── cmsis_compiler.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── cmsis_gcc.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── LICENSE.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── STM32F1xx_HAL_Driver&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── Inc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── Legacy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   │   └── stm32_hal_legacy.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── stm32f1xx_hal.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── stm32f1xx_hal_cortex.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── stm32f1xx_hal_def.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── LICENSE.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── Src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── stm32f1xx_hal.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── stm32f1xx_hal_cortex.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── stm32f1xx_hal_dma.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── STM32F103C8Tx_FLASH.ld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── README&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── lib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── README&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── one.ioc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── platformio.ini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── startup_stm32f103xb.s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── README&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3配置工程&#34;&gt;3.配置工程&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;修改 platformio.ini&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;platformIo.ini&lt;/strong&gt;中添加：&lt;/p&gt;</description>
    </item>
    <item>
      <title>fire,一个强大的「python」库</title>
      <link>https://blog.ronan.us.kg/posts/fire%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%9A%84python%E5%BA%93/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:24 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/fire%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%9A%84python%E5%BA%93/</guid>
      <description>&lt;p&gt;Github地址：&lt;a href=&#34;https://github.com/google/python-fire&#34;&gt;https://github.com/google/python-fire&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在开发命令行工具时，开发者通常需要编写大量代码来解析命令行参数，这既耗时又容易出错。Python Fire 是 Google 开源的一个库，旨在简化命令行界面的开发。它可以将任何 Python 对象自动生成一个命令行界面，从而大大减少了开发时间和代码复杂度。本文将详细介绍 Python Fire 库，包括其安装方法、主要特性、基本和高级功能，以及实际应用场景，帮助全面了解并掌握该库的使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;p&gt;要使用 Python Fire 库，首先需要安装它。以下是安装步骤：&lt;/p&gt;&#xA;&lt;p&gt;使用 pip 安装&lt;/p&gt;&#xA;&lt;p&gt;可以通过 pip 直接安装 Python Fire：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install fire&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;特性&#34;&gt;特性&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;自动生成命令行界面&lt;/strong&gt;：将任何 Python 对象（函数、类、模块、字典等）自动转换为命令行界面。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;简洁性&lt;/strong&gt;：只需一行代码即可生成命令行界面，大大减少了开发时间和代码复杂度。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;灵活性&lt;/strong&gt;：支持多种数据类型和参数，能够处理复杂的命令行需求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;易用性&lt;/strong&gt;：与 Python 标准库无缝集成，易于上手和使用。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;基本功能&#34;&gt;基本功能&lt;/h2&gt;&#xA;&lt;h3 id=&#34;将函数转换为命令行工具&#34;&gt;将函数转换为命令行工具&lt;/h3&gt;&#xA;&lt;p&gt;可以将一个简单的函数转换为命令行工具：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import fire&#xA;&#xA;def greet(name):&#xA;    return f&amp;#39;Hello, {name}!&amp;#39;&#xA;&#xA;if __name__ == &amp;#39;__main__&amp;#39;:&#xA;    fire.Fire(greet)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在命令行中运行：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python greet.py John&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Hello, John!&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;将类转换为命令行工具&#34;&gt;将类转换为命令行工具&lt;/h3&gt;&#xA;&lt;p&gt;可以将一个类转换为命令行工具：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import fire&#xA;&#xA;class Calculator:&#xA;    def add(self, a, b):&#xA;        return a + b&#xA;&#xA;    def multiply(self, a, b):&#xA;        return a * b&#xA;&#xA;if __name__ == &amp;#39;__main__&amp;#39;:&#xA;    fire.Fire(Calculator)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在命令行中运行：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfile的简单实现</title>
      <link>https://blog.ronan.us.kg/posts/dockerfile%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:22 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/dockerfile%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h1 id=&#34;构建第一个dockerfile&#34;&gt;构建第一个Dockerfile&lt;/h1&gt;&#xA;&lt;p&gt;假设该镜像实现的等同于我们在已经配置好python环境的机器上通过&lt;code&gt;python hello.py&lt;/code&gt;命令来运行一个python脚本&lt;/p&gt;&#xA;&lt;p&gt;所以该Dockerfile的构建有以下步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在桌面或其他位置新建一个文件夹，假设文件夹名为docker&lt;/li&gt;&#xA;&lt;li&gt;在docker新建一个hello.py文件，hello.py已经实现所需功能&lt;/li&gt;&#xA;&lt;li&gt;再在docker新建一个&lt;code&gt;Dockerfile&lt;/code&gt;，&lt;strong&gt;注意：仅开头且必须大写&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以下是Dockerfile内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM python:3.9.19-alpine3.18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY hello.py /hello.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CMD python hello.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;dockerfile语法说明&#34;&gt;Dockerfile语法说明&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 是 Docker 构建镜像的描述文件，它包含了一系列指令，描述了如何从基础镜像创建一个新的 Docker 镜像。&lt;/p&gt;&#xA;&lt;p&gt;下面是 &lt;code&gt;Dockerfile&lt;/code&gt; 中常用指令的说明及其语法，参考自Docker Dockerfile | 菜鸟教程 (runoob.com)：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 指令&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FROM&lt;/td&gt;&#xA;          &lt;td&gt;指定基础镜像，用于后续的指令构建。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MAINTAINER&lt;/td&gt;&#xA;          &lt;td&gt;指定Dockerfile的作者/维护者。（已弃用，推荐使用LABEL指令）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LABEL&lt;/td&gt;&#xA;          &lt;td&gt;添加镜像的元数据，使用键值对的形式。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;RUN&lt;/td&gt;&#xA;          &lt;td&gt;在构建过程中在镜像中执行命令。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CMD&lt;/td&gt;&#xA;          &lt;td&gt;指定容器创建时的默认命令。（可以被覆盖）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ENTRYPOINT&lt;/td&gt;&#xA;          &lt;td&gt;设置容器创建时的主要命令。（不可被覆盖）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;EXPOSE&lt;/td&gt;&#xA;          &lt;td&gt;声明容器运行时监听的特定网络端口。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ENV&lt;/td&gt;&#xA;          &lt;td&gt;在容器内部设置环境变量。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ADD&lt;/td&gt;&#xA;          &lt;td&gt;将文件、目录或远程URL复制到镜像中。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;COPY&lt;/td&gt;&#xA;          &lt;td&gt;将文件或目录复制到镜像中。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;VOLUME&lt;/td&gt;&#xA;          &lt;td&gt;为容器创建挂载点或声明卷。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;WORKDIR&lt;/td&gt;&#xA;          &lt;td&gt;设置后续指令的工作目录。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;USER&lt;/td&gt;&#xA;          &lt;td&gt;指定后续指令的用户上下文。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ARG&lt;/td&gt;&#xA;          &lt;td&gt;定义在构建过程中传递给构建器的变量，可使用 &amp;ldquo;docker build&amp;rdquo; 命令设置。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ONBUILD&lt;/td&gt;&#xA;          &lt;td&gt;当该镜像被用作另一个构建过程的基础时，添加触发器。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;STOPSIGNAL&lt;/td&gt;&#xA;          &lt;td&gt;设置发送给容器以退出的系统调用信号。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;HEALTHCHECK&lt;/td&gt;&#xA;          &lt;td&gt;定义周期性检查容器健康状态的命令。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SHELL&lt;/td&gt;&#xA;          &lt;td&gt;覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;详细说明：&lt;/p&gt;</description>
    </item>
    <item>
      <title>「图床」md 图片链接替换</title>
      <link>https://blog.ronan.us.kg/posts/%E5%9B%BE%E5%BA%8Amd-%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:20 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/%E5%9B%BE%E5%BA%8Amd-%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E6%9B%BF%E6%8D%A2/</guid>
      <description>&lt;p&gt;在 main 函数的 old_domain 为旧的图片链接，new_domain 是新的图片链接，根据自身情况填写。&lt;/p&gt;&#xA;&lt;p&gt;将以下代码保存为 &lt;code&gt;re.py&lt;/code&gt; ,使用方法：&lt;code&gt;usage: re.py [-h] input_dir&lt;/code&gt;，参数是一个目录路径。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkReplace&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, old_domain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, new_domain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, input_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;old_domain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; old_domain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_domain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_domain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_dir&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;old_domain &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_domain &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Both old_domain and new_domain must be provided&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_ibl_in_md&lt;/span&gt;(self): &lt;span style=&#34;color:#75715e&#34;&gt;# 替换 md 文档的图片链接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 匹配 Markdown 文件中的图片链接的正则表达式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        image_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!\[.*?\]\((.*?)\)&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 拼接完整的文件路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir, file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file_path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;md&amp;#39;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 打开并读取文件内容&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 查找符合条件的图片链接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; image_pattern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(content)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 遍历找到的链接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; link &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; links:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;old_domain &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; link:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 只替换包含 old_domain 的链接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        updated_link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; link&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;old_domain, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_domain)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; content&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(link, updated_link)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# 如果内容有更改，则写回文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; modified:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(content)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Updated links in: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;file_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_ibl_in_md&lt;/span&gt;(self): &lt;span style=&#34;color:#75715e&#34;&gt;# 输出 md 文档中所有的图片链接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 匹配 Markdown 文件中的图片链接的正则表达式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        image_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!\[.*?\]\((.*?)\)&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 拼接完整的文件路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir, file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file_path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;md&amp;#39;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 打开并读取文件内容&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 查找符合条件的图片链接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; image_pattern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(content)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; link:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;file_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;link&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;传入一个目录，替换目录下所有 md 文档的图片链接&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input_dir&amp;#34;&lt;/span&gt;, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;输入目录路径&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 要替换的域名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    old_domain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_domain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinkReplace(old_domain, new_domain, args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_dir)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace_ibl_in_md()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_ibl_in_md()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>RonanBlog 备份自动化</title>
      <link>https://blog.ronan.us.kg/posts/ronanblog-%E5%A4%87%E4%BB%BD%E8%87%AA%E5%8A%A8%E5%8C%96/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:19 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/ronanblog-%E5%A4%87%E4%BB%BD%E8%87%AA%E5%8A%A8%E5%8C%96/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文仅适用于&lt;a href=&#34;https://github.com/Huxpro/huxpro.github.io&#34;&gt;Huxpro 博客及其模板&lt;/a&gt; ！！！&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;准备-backuppy-以及-backup&#34;&gt;准备 &lt;code&gt;backup.py&lt;/code&gt; 以及 &lt;code&gt;backup&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;1.在 &lt;code&gt;仓库根目录&lt;/code&gt; 下新建一个 backup 空目录，「为防止 github 自动忽略空目录，所以可以在backup 里面随便新建一个 t.md」&lt;br&gt;&#xA;2.将以下代码保存为 &lt;code&gt;backup.py&lt;/code&gt; 并且放置到 &lt;code&gt;仓库根目录&lt;/code&gt; 下&lt;/p&gt;&#xA;&lt;p&gt;backup.py 源码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backup&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, source_path, backup):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 备份的文档路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 带日期前缀的博文目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;source_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source_path&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_file&lt;/span&gt;(self, file_name):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 去掉文件元数据和名称前面的日期&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        removing_date_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{4}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{2}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{2}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 读取文件内容并移除 YAML 前置事项&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;source_path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;file_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用正则表达式找到并去掉第一个以“---”分隔的部分&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^---.*?---\s*&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, content, flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DOTALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 将修改后的内容写入新的文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backup&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;removing_date_file&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; new_file:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(content)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_old_file&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 backup 目录下的所有 md 文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backup_files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backup) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;)}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 _posts 目录下的所有 md 文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source_files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;source_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;)}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 获得_posts 目录下去除日期后的文件名的集合&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        intermediate_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{4}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{2}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-\d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{2}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, f) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; source_files}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 找出在 backup 目录中但不在 source 目录中的文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        unmatched_files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backup_files &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; intermediate_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 删除这些不一致的文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; unmatched_files:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backup, file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(file_path)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_post_name&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; list[str]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        post_names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; post_name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;source_path):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; post_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; post_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                post_names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(post_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; post_names&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Process a file to remove date from filename and YAML front matter.&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 添加一个位置参数来接受文件路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;source_path&amp;#39;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;需要备份的目录&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;backup&amp;#39;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;备份文件存放的目录&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 解析命令行参数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 创建 Backup 类的实例&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    backup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Backup(args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;source_path, args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backup)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post_names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_post_name()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; post_name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; post_names:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process_file(post_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    backup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete_old_file()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;backup succeed&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;修改actions&#34;&gt;修改actions&lt;/h1&gt;&#xA;&lt;p&gt;将仓库根目录下的 &lt;code&gt;.github/workflows/jekyll.yml&lt;/code&gt; 内容修改为：&lt;/p&gt;</description>
    </item>
    <item>
      <title>「platformIO」基于 stm32 标准外设库的工程模板</title>
      <link>https://blog.ronan.us.kg/posts/platformio%E5%9F%BA%E4%BA%8E-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:17 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/platformio%E5%9F%BA%E4%BA%8E-stm32-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E7%9A%84%E5%B7%A5%E7%A8%8B%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本教程默认用户已经安装好 vscode 和 platformIO ！！！&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;1下载官方标准外设库&#34;&gt;1.下载官方标准外设库&lt;/h1&gt;&#xA;&lt;p&gt;进入 &lt;a href=&#34;https://www.st.com.cn/zh/embedded-software/stm32-standard-peripheral-libraries.html&#34;&gt;ST 官网的嵌入式软件板块&lt;/a&gt; ，根据自身板子型号选择，有F0-F4多种型号。&lt;/p&gt;&#xA;&lt;p&gt;之后根据提示选择下载即可，如果没有意外的话，应该会获得一个类似 &lt;strong&gt;en.stsw-stm32065_v1-9-0.zip(这是 F4 的标准库)&lt;/strong&gt; 的压缩包。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2在-platformio-新建一个-cmsis-工程&#34;&gt;2.在 platformIO 新建一个 CMSIS 工程&lt;/h1&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/PIOproject1.png&#34; data-dimbox data-dimbox-caption=&#34;NO1&#34;&gt;&#xA;  &lt;img alt=&#34;NO1&#34; src=&#34;https://imgs.ronan.us.kg/PIOproject1.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://imgs.ronan.us.kg/PIOproject2.png&#34; data-dimbox data-dimbox-caption=&#34;NO2&#34;&gt;&#xA;  &lt;img alt=&#34;NO2&#34; src=&#34;https://imgs.ronan.us.kg/PIOproject2.png&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;工程建立成功之后，应该是下面这样：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── README&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── lib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── README&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── platformio.ini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── README&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3导入标准库文件并配置工程&#34;&gt;3.导入标准库文件并配置工程&lt;/h1&gt;&#xA;&lt;h3 id=&#34;31导入标准库文件&#34;&gt;3.1导入标准库文件&lt;/h3&gt;&#xA;&lt;p&gt;1.解压从官网下载的标准外设库 &lt;strong&gt;en.stsw-stm32065_v1-9-0.zip&lt;/strong&gt; ，获得一个 &lt;strong&gt;STM32F4xx_DSP_StdPeriph_Lib_V1.9.0&lt;/strong&gt; 目录&lt;/p&gt;&#xA;&lt;p&gt;2.在 platformIO 工程的 include 目录中新建一个 main.h：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;#34;stm32f4xx.h&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包含头文件根据开发板型号而定。&lt;/p&gt;&#xA;&lt;p&gt;3.打开 &lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Libraries/CMSIS/Device/ST/STM32F4xx/Include&lt;/code&gt; ，将其中的 &lt;code&gt;stm32f4xx.h&lt;/code&gt; 、&lt;code&gt;system_stm32f4xx.h&lt;/code&gt;复制到 platform 工程的 include 目录下。&lt;/p&gt;&#xA;&lt;p&gt;4.打开&lt;code&gt;.../STM32F4xx_DSP_StdPeriph_Lib_V1.9.0/Project/STM32F4xx_StdPeriph_Templates&lt;/code&gt;，将其中的&lt;code&gt;stm32f4xx_it.h&lt;/code&gt;、&lt;code&gt;stm32f4xx_conf.h&lt;/code&gt;复制到 platform 工程的 include 目录下；将&lt;code&gt;stm32f4xx_it.c&lt;/code&gt;复制到 platform 工程的 src 目录中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Python」虚拟环境</title>
      <link>https://blog.ronan.us.kg/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 22 Oct 2024 13:28:16 +0800</pubDate>
      <guid>https://blog.ronan.us.kg/posts/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;p&gt;&lt;em&gt;在虚拟环境中，pip 和 pip3 通常会指向同一个 Python 版本的包管理器。虚拟环境会自动配置 pip 指向该环境中的 Python 解释器。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;创建虚拟环境&#34;&gt;创建虚拟环境：&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 -m venv myenv&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;[!NOTE]&#xA;&lt;em&gt;此方法创建的虚拟环境基于系统自带的python版本，不能创建系统未安装的python版本的虚拟环境。假设系统的python3版本是3.12，那么通过 &lt;code&gt;-m venv&lt;/code&gt; 创建的虚拟环境中的python也会是3.12版本的&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;如果要创建系统本身未安装的python版本虚拟环境，可以通过 &lt;a href=&#34;https://blog.ronan.us.kg/post/Conda-chang-yong-yong-fa.html&#34;&gt;conda&lt;/a&gt; 实现&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;激活虚拟环境&#34;&gt;激活虚拟环境：&lt;/h1&gt;&#xA;&lt;p&gt;1.对于 Bash 或 Zsh：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;source myenv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.对于 Fish shell：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;source myenv/bin/activate.fish&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.对于 Windows 命令提示符：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;myenv\Scripts\activate.bat&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.对于 Windows PowerShell：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;myenv\Scripts\Activate.ps1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;检查pip和pip3指向的路径&#34;&gt;检查pip和pip3指向的路径：&lt;/h1&gt;&#xA;&lt;p&gt;激活虚拟环境后，运行以下命令来检查 pip 和 pip3 的路径：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;which pip&#xA;which pip3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在虚拟环境中，这两个命令通常会输出相同的路径，例如：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/path/to/your/venv/bin/pip&#xA;/path/to/your/venv/bin/pip3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;检查pip和pip3版本&#34;&gt;检查pip和pip3版本：&lt;/h1&gt;&#xA;&lt;p&gt;你也可以检查pip和pip3的版本号，它们应该指向相同的Python版本：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip -V&#xA;pip3 -V&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出应该类似于：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip 20.2.3 from /path/to/your/venv/lib/python3.8/site-packages/pip (python 3.8)&#xA;pip 20.2.3 from /path/to/your/venv/lib/python3.8/site-packages/pip (python 3.8)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
  </channel>
</rss>
